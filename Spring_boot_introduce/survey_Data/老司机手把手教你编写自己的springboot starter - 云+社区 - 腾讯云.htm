<!DOCTYPE html>
<html><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8"><!-- base href="https://cloud.tencent.com/developer/article/1718134" --><style>body{margin-left:0;margin-right:0;margin-top:0}#bN015htcoyT__google-cache-hdr{background:#f8f9fa;font:13px arial,sans-serif;text-align:left;color:#202124;border:0;margin:0;border-bottom:1px solid #dadce0;line-height:16px;padding:16px 28px 24px 28px}#bN015htcoyT__google-cache-hdr *{display:inline;font:inherit;text-align:inherit;color:inherit;line-height:inherit;background:none;border:0;margin:0;padding:0;letter-spacing:0}#bN015htcoyT__google-cache-hdr a{text-decoration:none;color:#1a0dab}#bN015htcoyT__google-cache-hdr a:hover{text-decoration:underline}#bN015htcoyT__google-cache-hdr a:visited{color:#4b11a8}#bN015htcoyT__google-cache-hdr div{display:block;margin-top:4px}#bN015htcoyT__google-cache-hdr b{font-weight:bold;display:inline-block;direction:ltr}</style></head><body><div id="bN015htcoyT__google-cache-hdr"><div><span>這是 Google 對 <a href="https://cloud.tencent.com/developer/article/1718134">https://cloud.tencent.com/developer/article/1718134</a> 的快取。</span>&nbsp;<span>這是該網頁於 2021年5月26日 02:41:12 GMT 顯示時的快照。</span>&nbsp;<span>在此期間，<a href="https://cloud.tencent.com/developer/article/1718134">目前網頁</a>可能已經變更。</span>&nbsp;<a href="http://support.google.com/websearch/bin/answer.py?hl=zh-TW&amp;p=cached&amp;answer=1687222"><span>瞭解更多資訊</span>.</a></div><div><span style="display:inline-block;margin-top:8px;margin-right:104px;white-space:nowrap"><span style="margin-right:28px"><span style="font-weight:bold">完整版</span></span><span style="margin-right:28px"><a href="http://webcache.googleusercontent.com/search?q=cache:1gahLNTYlQ8J:https://cloud.tencent.com/developer/article/1718134&amp;newwindow=1&amp;client=firefox-b-d&amp;hl=zh-TW&amp;strip=1&amp;vwsrc=0"><span>純文字版</span></a></span><span style="margin-right:28px"><a href="http://webcache.googleusercontent.com/search?q=cache:1gahLNTYlQ8J:https://cloud.tencent.com/developer/article/1718134&amp;newwindow=1&amp;client=firefox-b-d&amp;hl=zh-TW&amp;strip=0&amp;vwsrc=1"><span>檢視原始碼</span></a></span></span></div><span style="display:inline-block;margin-top:8px;color:#70757a"><span>提示：如要在這個網頁上快速尋找您所搜尋的字詞，請按下 <b>Ctrl+F</b> 鍵或 <b>⌘-F</b> 鍵 (Mac)，然後使用尋找列進行搜尋。</span></span></div><div style="position:relative;"><meta charset="UTF-8"><meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1"><title>老司机手把手教你编写自己的springboot starter - 云+社区 - 腾讯云</title><meta name="keywords" content=""><meta name="description" content=""><meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, viewport-fit=cover"><meta name="format-detection" content="telephone=no"><link rel="stylesheet" href="%E8%80%81%E5%8F%B8%E6%9C%BA%E6%89%8B%E6%8A%8A%E6%89%8B%E6%95%99%E4%BD%A0%E7%BC%96%E5%86%99%E8%87%AA%E5%B7%B1%E7%9A%84springboot%20starter%20-%20%E4%BA%91+%E7%A4%BE%E5%8C%BA%20-%20%E8%85%BE%E8%AE%AF%E4%BA%91_files/global-201911291451.htm"><link rel="stylesheet" href="%E8%80%81%E5%8F%B8%E6%9C%BA%E6%89%8B%E6%8A%8A%E6%89%8B%E6%95%99%E4%BD%A0%E7%BC%96%E5%86%99%E8%87%AA%E5%B7%B1%E7%9A%84springboot%20starter%20-%20%E4%BA%91+%E7%A4%BE%E5%8C%BA%20-%20%E8%85%BE%E8%AE%AF%E4%BA%91_files/base-202105211430.htm"><link data-key="home-mobile" rel="stylesheet" href="%E8%80%81%E5%8F%B8%E6%9C%BA%E6%89%8B%E6%8A%8A%E6%89%8B%E6%95%99%E4%BD%A0%E7%BC%96%E5%86%99%E8%87%AA%E5%B7%B1%E7%9A%84springboot%20starter%20-%20%E4%BA%91+%E7%A4%BE%E5%8C%BA%20-%20%E8%85%BE%E8%AE%AF%E4%BA%91_files/Home2-202105211430.htm" disabled=""><link rel="stylesheet" href="%E8%80%81%E5%8F%B8%E6%9C%BA%E6%89%8B%E6%8A%8A%E6%89%8B%E6%95%99%E4%BD%A0%E7%BC%96%E5%86%99%E8%87%AA%E5%B7%B1%E7%9A%84springboot%20starter%20-%20%E4%BA%91+%E7%A4%BE%E5%8C%BA%20-%20%E8%85%BE%E8%AE%AF%E4%BA%91_files/Column-202104251653.htm"><link data-key="tag-mobile" rel="stylesheet" href="%E8%80%81%E5%8F%B8%E6%9C%BA%E6%89%8B%E6%8A%8A%E6%89%8B%E6%95%99%E4%BD%A0%E7%BC%96%E5%86%99%E8%87%AA%E5%B7%B1%E7%9A%84springboot%20starter%20-%20%E4%BA%91+%E7%A4%BE%E5%8C%BA%20-%20%E8%85%BE%E8%AE%AF%E4%BA%91_files/Tag-202102241026.htm" disabled=""><link data-key="ask-mobile" rel="stylesheet" href="%E8%80%81%E5%8F%B8%E6%9C%BA%E6%89%8B%E6%8A%8A%E6%89%8B%E6%95%99%E4%BD%A0%E7%BC%96%E5%86%99%E8%87%AA%E5%B7%B1%E7%9A%84springboot%20starter%20-%20%E4%BA%91+%E7%A4%BE%E5%8C%BA%20-%20%E8%85%BE%E8%AE%AF%E4%BA%91_files/QA-20199161841.htm" disabled=""><link data-key="salon-mobile" rel="stylesheet" href="%E8%80%81%E5%8F%B8%E6%9C%BA%E6%89%8B%E6%8A%8A%E6%89%8B%E6%95%99%E4%BD%A0%E7%BC%96%E5%86%99%E8%87%AA%E5%B7%B1%E7%9A%84springboot%20starter%20-%20%E4%BA%91+%E7%A4%BE%E5%8C%BA%20-%20%E8%85%BE%E8%AE%AF%E4%BA%91_files/Salon-202103301528.htm" disabled=""><link data-key="videojs" rel="stylesheet" href="%E8%80%81%E5%8F%B8%E6%9C%BA%E6%89%8B%E6%8A%8A%E6%89%8B%E6%95%99%E4%BD%A0%E7%BC%96%E5%86%99%E8%87%AA%E5%B7%B1%E7%9A%84springboot%20starter%20-%20%E4%BA%91+%E7%A4%BE%E5%8C%BA%20-%20%E8%85%BE%E8%AE%AF%E4%BA%91_files/video-js.htm" disabled=""><link data-key="timl-mobile" rel="stylesheet" href="%E8%80%81%E5%8F%B8%E6%9C%BA%E6%89%8B%E6%8A%8A%E6%89%8B%E6%95%99%E4%BD%A0%E7%BC%96%E5%86%99%E8%87%AA%E5%B7%B1%E7%9A%84springboot%20starter%20-%20%E4%BA%91+%E7%A4%BE%E5%8C%BA%20-%20%E8%85%BE%E8%AE%AF%E4%BA%91_files/TeamSpecial-202005201508.htm" disabled=""><link data-key="summary2019" rel="stylesheet" href="%E8%80%81%E5%8F%B8%E6%9C%BA%E6%89%8B%E6%8A%8A%E6%89%8B%E6%95%99%E4%BD%A0%E7%BC%96%E5%86%99%E8%87%AA%E5%B7%B1%E7%9A%84springboot%20starter%20-%20%E4%BA%91+%E7%A4%BE%E5%8C%BA%20-%20%E8%85%BE%E8%AE%AF%E4%BA%91_files/main-202101131044.htm" disabled=""><link data-key="rank-mobile" rel="stylesheet" href="%E8%80%81%E5%8F%B8%E6%9C%BA%E6%89%8B%E6%8A%8A%E6%89%8B%E6%95%99%E4%BD%A0%E7%BC%96%E5%86%99%E8%87%AA%E5%B7%B1%E7%9A%84springboot%20starter%20-%20%E4%BA%91+%E7%A4%BE%E5%8C%BA%20-%20%E8%85%BE%E8%AE%AF%E4%BA%91_files/Rank-202005291141.htm" disabled=""><link data-key="team-mobile" rel="stylesheet" href="%E8%80%81%E5%8F%B8%E6%9C%BA%E6%89%8B%E6%8A%8A%E6%89%8B%E6%95%99%E4%BD%A0%E7%BC%96%E5%86%99%E8%87%AA%E5%B7%B1%E7%9A%84springboot%20starter%20-%20%E4%BA%91+%E7%A4%BE%E5%8C%BA%20-%20%E8%85%BE%E8%AE%AF%E4%BA%91_files/Nonstop-202005201508.htm" disabled=""><link data-key="user-center-mobile" rel="stylesheet" href="%E8%80%81%E5%8F%B8%E6%9C%BA%E6%89%8B%E6%8A%8A%E6%89%8B%E6%95%99%E4%BD%A0%E7%BC%96%E5%86%99%E8%87%AA%E5%B7%B1%E7%9A%84springboot%20starter%20-%20%E4%BA%91+%E7%A4%BE%E5%8C%BA%20-%20%E8%85%BE%E8%AE%AF%E4%BA%91_files/UserCenter2-202103311722.htm" disabled=""><link data-key="search-mobile" rel="stylesheet" href="%E8%80%81%E5%8F%B8%E6%9C%BA%E6%89%8B%E6%8A%8A%E6%89%8B%E6%95%99%E4%BD%A0%E7%BC%96%E5%86%99%E8%87%AA%E5%B7%B1%E7%9A%84springboot%20starter%20-%20%E4%BA%91+%E7%A4%BE%E5%8C%BA%20-%20%E8%85%BE%E8%AE%AF%E4%BA%91_files/Result-202103311722.htm" disabled=""><link rel="stylesheet" href="%E8%80%81%E5%8F%B8%E6%9C%BA%E6%89%8B%E6%8A%8A%E6%89%8B%E6%95%99%E4%BD%A0%E7%BC%96%E5%86%99%E8%87%AA%E5%B7%B1%E7%9A%84springboot%20starter%20-%20%E4%BA%91+%E7%A4%BE%E5%8C%BA%20-%20%E8%85%BE%E8%AE%AF%E4%BA%91_files/Packs-202012311014.htm"><link data-key="footprint-mobile" rel="stylesheet" href="%E8%80%81%E5%8F%B8%E6%9C%BA%E6%89%8B%E6%8A%8A%E6%89%8B%E6%95%99%E4%BD%A0%E7%BC%96%E5%86%99%E8%87%AA%E5%B7%B1%E7%9A%84springboot%20starter%20-%20%E4%BA%91+%E7%A4%BE%E5%8C%BA%20-%20%E8%85%BE%E8%AE%AF%E4%BA%91_files/TriennialH5-202010231159.htm" disabled=""><link data-key="video-detail-mobile" rel="stylesheet" href="%E8%80%81%E5%8F%B8%E6%9C%BA%E6%89%8B%E6%8A%8A%E6%89%8B%E6%95%99%E4%BD%A0%E7%BC%96%E5%86%99%E8%87%AA%E5%B7%B1%E7%9A%84springboot%20starter%20-%20%E4%BA%91+%E7%A4%BE%E5%8C%BA%20-%20%E8%85%BE%E8%AE%AF%E4%BA%91_files/Video-202104211953.htm" disabled=""><link data-key="video-detail-mobile" rel="stylesheet" href="%E8%80%81%E5%8F%B8%E6%9C%BA%E6%89%8B%E6%8A%8A%E6%89%8B%E6%95%99%E4%BD%A0%E7%BC%96%E5%86%99%E8%87%AA%E5%B7%B1%E7%9A%84springboot%20starter%20-%20%E4%BA%91+%E7%A4%BE%E5%8C%BA%20-%20%E8%85%BE%E8%AE%AF%E4%BA%91_files/MediaPlayerPro-202101141126.htm" disabled=""><link data-key="video-mobile" rel="stylesheet" href="%E8%80%81%E5%8F%B8%E6%9C%BA%E6%89%8B%E6%8A%8A%E6%89%8B%E6%95%99%E4%BD%A0%E7%BC%96%E5%86%99%E8%87%AA%E5%B7%B1%E7%9A%84springboot%20starter%20-%20%E4%BA%91+%E7%A4%BE%E5%8C%BA%20-%20%E8%85%BE%E8%AE%AF%E4%BA%91_files/Video-202104211953.htm" disabled=""><link rel="stylesheet" href="%E8%80%81%E5%8F%B8%E6%9C%BA%E6%89%8B%E6%8A%8A%E6%89%8B%E6%95%99%E4%BD%A0%E7%BC%96%E5%86%99%E8%87%AA%E5%B7%B1%E7%9A%84springboot%20starter%20-%20%E4%BA%91+%E7%A4%BE%E5%8C%BA%20-%20%E8%85%BE%E8%AE%AF%E4%BA%91_files/markdown-201810241044.htm"><link rel="stylesheet" href="%E8%80%81%E5%8F%B8%E6%9C%BA%E6%89%8B%E6%8A%8A%E6%89%8B%E6%95%99%E4%BD%A0%E7%BC%96%E5%86%99%E8%87%AA%E5%B7%B1%E7%9A%84springboot%20starter%20-%20%E4%BA%91+%E7%A4%BE%E5%8C%BA%20-%20%E8%85%BE%E8%AE%AF%E4%BA%91_files/draft-master-v1.htm"><style media="screen">@supports (padding:max(0px)){.set-safe-area .com-main{bottom:calc(max(12px,constant(safe-area-inset-bottom)) + 50px);bottom:calc(max(12px,env(safe-area-inset-bottom)) + 50px)}.set-safe-area .com-main-simple-sec,.set-safe-area .com-main.without-tab-ft,.set-safe-area .com-main.without-ft{bottom:max(12px,constant(safe-area-inset-bottom));bottom:max(12px,env(safe-area-inset-bottom))}.set-safe-area .com-main-sec{bottom:max(12px,constant(safe-area-inset-bottom));bottom:max(12px,env(safe-area-inset-bottom))}.set-safe-area .com-m-footer,.set-safe-area .sa-fixed-btns{bottom:max(12px,constant(safe-area-inset-bottom));bottom:max(12px,env(safe-area-inset-bottom))}.set-safe-area .com-mobile-body{bottom:max(12px,constant(safe-area-inset-bottom));bottom:max(12px,env(safe-area-inset-bottom))}}@supports (padding:max(0px)){.set-safe-area .support-wrap,.set-safe-area div.body{bottom:max(12px,constant(safe-area-inset-bottom));bottom:max(12px,env(safe-area-inset-bottom))}.set-safe-area .com-responsive-no-ft div.body{bottom:max(12px,constant(safe-area-inset-bottom));bottom:max(12px,env(safe-area-inset-bottom))}}</style><meta name="theme-color" content="#fff"><meta name="apple-mobile-web-app-capable" content="yes"><meta name="apple-mobile-web-app-status-bar-style" content="black"><meta name="apple-mobile-web-app-title" content="腾讯云+社区"><link rel="apple-touch-icon" href="https://imgcache.qq.com/qcloud/developer/images/release/pwa-icons/logo-192.png"><div id="react-root"><div class="com-global" data-reactroot=""><header class="com-header J-header subsite"><div class="header-main"><a href="javascript:;" hotrep="community.header.menu_trigger" class="header-menu-trigger">展开</a><h1 class="header-main-title">专栏</h1></div><div class="header-logo-wrap"><div class="header-logo"><i class="logo-icon logo-community"></i><h1 class="header-title">腾讯云·社区</h1></div></div><nav class="header-extra"><a href="https://cloud.tencent.com/developer/search" class="header-extra-icon search-entry" hotrep="community.home.header.search.icon"></a><a href="javascript:;">登录</a></nav></header><div class="J-main com-main without-tab-ft pg-2-article"><div class="col-author-panel"><div class="panel-main"><div class="col-author-panel-media"><div class="media-object"><a href="https://cloud.tencent.com/developer/user/5604447" class="media-avatar" style="background-image:url(https://ask.qcloudimg.com/http-save/yehe-5604447/z1kfmbmf57.jpeg?imageView2/2/w/80)"></a></div><div class="media-body"><h3 class="media-name"><a href="https://cloud.tencent.com/developer/user/5604447" class="media-name-inner">苏三说技术</a></h3><a href="https://cloud.tencent.com/developer/column/89029" class="com-arrow-link gray">47<!-- --> 篇文章</a></div></div></div><div class="panel-extra"><button type="button" class="c-btn com-2-btn"><span class="btn-text">关注</span></button></div></div><div class="col-article-panel J-articlePanel"><div class="col-2-article-header"><h1 class="article-title"><span>老司机手把手教你编写自己的springboot starter</span></h1><div class="article-mate"><div class="article-infos"><span class="article-info"><time datetime="2020-10-15 14:44:58" title="2020-10-15 14:44:58"> 2020-10-15<span class="com-v-box">2020-10-15 14:44:58</span></time></span><span class="article-info">阅读 <!-- -->260</span>0</div><div class="article-mate-extra"><a href="javascript:;" class="opt-link weak"><i class="opt-link-icon more"></i></a></div><div class="article-mate-single"></div></div></div><div class="com-markdown-collpase"><div class="com-markdown-collpase-main"><div class="rno-markdown J-articleContent"><p>继上一篇《<a data-from="10680" href="http://mp.weixin.qq.com/s?__biz=MzUxODkzNTQ3Nw==&amp;mid=2247484174&amp;idx=2&amp;sn=56764cbc8d038c7e60205bf5ad98bed7&amp;chksm=f98005d4cef78cc273775dd106e8b17f7f60cc50d448b56704a7723336d75242e2d7edefdacc&amp;scene=21#wechat_redirect" target="_blank" rel="nofollow noopener noreferrer"><u><strong>面试时被问到单例模式，怎么回答才能让面试官眼前一亮？</strong></u></a>》之后，我打算对<code>springboot</code>的部分功能做一下介绍。因为现在<code>springboot</code>使用的人越来越多，已经成了java行业主流的框架。</p><p>本文先介绍<code>springboot</code>的 <code>starter</code>机制，从以下方向着手：</p><p>1.为什么要用starter
</p><p>2.starter的几个要素</p><p>3.编写自己的starter</p><p>4.starter的底层实现</p><h2 id="%E4%B8%80%E3%80%81%E4%B8%BA%E4%BB%80%E4%B9%88%E8%A6%81%E7%94%A8starter" name="%E4%B8%80%E3%80%81%E4%B8%BA%E4%BB%80%E4%B9%88%E8%A6%81%E7%94%A8starter"><strong>一、为什么要用starter</strong></h2><h4 id="%E5%9C%A8springboot%E8%BF%98%E6%B2%A1%E6%9C%89%E5%87%BA%E6%9D%A5%E4%B9%8B%E5%89%8D%EF%BC%8C%E6%88%91%E4%BB%AC%E4%BD%BF%E7%94%A8spring%E5%BC%80%E5%8F%91%E9%A1%B9%E7%9B%AE%E3%80%82%E5%A6%82%E6%9E%9C%E7%A8%8B%E5%BA%8F%E9%9C%80%E8%A6%81%E8%BF%9E%E6%8E%A5%E6%95%B0%E6%8D%AE%E5%BA%93%EF%BC%8C%E6%88%91%E4%BB%AC%E4%B8%80%E8%88%AC%E4%BC%9A%E4%BD%BF%E7%94%A8hibernate%E6%88%96mybatis%E7%AD%89ORM%E6%A1%86%E6%9E%B6%EF%BC%8C%E8%BF%99%E9%87%8C%E6%88%91%E4%BB%A5mybatis%E4%B8%BA%E4%BE%8B%EF%BC%8C%E5%85%B7%E4%BD%93%E7%9A%84%E6%93%8D%E4%BD%9C%E6%AD%A5%E9%AA%A4%E5%A6%82%E4%B8%8B%EF%BC%9A" name="%E5%9C%A8springboot%E8%BF%98%E6%B2%A1%E6%9C%89%E5%87%BA%E6%9D%A5%E4%B9%8B%E5%89%8D%EF%BC%8C%E6%88%91%E4%BB%AC%E4%BD%BF%E7%94%A8spring%E5%BC%80%E5%8F%91%E9%A1%B9%E7%9B%AE%E3%80%82%E5%A6%82%E6%9E%9C%E7%A8%8B%E5%BA%8F%E9%9C%80%E8%A6%81%E8%BF%9E%E6%8E%A5%E6%95%B0%E6%8D%AE%E5%BA%93%EF%BC%8C%E6%88%91%E4%BB%AC%E4%B8%80%E8%88%AC%E4%BC%9A%E4%BD%BF%E7%94%A8hibernate%E6%88%96mybatis%E7%AD%89ORM%E6%A1%86%E6%9E%B6%EF%BC%8C%E8%BF%99%E9%87%8C%E6%88%91%E4%BB%A5mybatis%E4%B8%BA%E4%BE%8B%EF%BC%8C%E5%85%B7%E4%BD%93%E7%9A%84%E6%93%8D%E4%BD%9C%E6%AD%A5%E9%AA%A4%E5%A6%82%E4%B8%8B%EF%BC%9A"><strong>在springboot还没有出来之前，我们使用spring开发项目。如果程序需要连接数据库，我们一般会使用hibernate或mybatis等ORM框架，这里我以mybatis为例，具体的操作步骤如下：</strong>
</h4><p>1. 到maven仓库去找需要引入的mybatis jar包，选取合适的版本。
</p><p>2. 到maven仓库去找mybatis-spring整合的jar包，选取合适的版本。</p><p>3. 在spring的applicationContext.xml文件中配置dataSource和mybatis相关信息。
</p><p>当然有些朋友可能会指正，不是还需要引入数据库驱动包吗？</p><p>确实需要引入，但数据库驱动有很多，比如：<code>mysql</code>、<code>oracle</code>、<code>sqlserver</code>，这不属于<code>mybatis</code>的范畴，使用者可以根据项目的实际情况单独引入。</p><p>如果程序只是需要连接数据库这一个功能还好，按上面的步骤做基本可以满足需求。但是，连接数据库可能只是庞大的项目体系中一个环节，实际项目中往往更复杂，需要引入更多的功能，比如：连接<code>redis</code>、连接<code>mongodb</code>、使用<code>rocketmq</code>、使用<code>excel</code>功能等等。
</p><p><strong>引入这些功能的话，需要再把上面的步骤再重复一次，工作量无形当中增加了不少，而且有很多重复的工作。</strong>
</p><p><strong>另外，还是有个问题，每次到要到maven中找合适的版本，如果哪次找的mybatis jar包 和 mybatis-spring jar包版本不兼容，程序不是会出现问题？</strong></p><p><strong>springboot为了解决以上两个问题引入了starter机制。</strong>
</p><h2 id="%E4%BA%8C%E3%80%81starter%E7%9A%84%E5%87%A0%E4%B8%AA%E8%A6%81%E7%B4%A0" name="%E4%BA%8C%E3%80%81starter%E7%9A%84%E5%87%A0%E4%B8%AA%E8%A6%81%E7%B4%A0"><strong>二、starter的几个要素</strong></h2><p>我们首先一起看看<code>mybatis-spring-boot-starter.jar</code>是如何定义的</p><figure><div class="image-block"><span class="lazy-image-holder" dataurl="https://ask.qcloudimg.com/http-save/yehe-5604447/txi1gdak8m.png"></span></div></figure><p>可以看到它的META-INF目录下只包含了：</p><ul class="ul-level-0"><li>pom.protperties  配置maven所需的项目version、groupId和artifactId</li><li>pom.xml  配置所依赖的jar包
</li><li>MANIFEST.MF 这个文件描述了该Jar文件的很多信息</li><li>spring.provides 配置所依赖的artifactId，给IDE使用的，没有其他的作用</li></ul><p><strong>注意一下，没有一行代码。</strong></p><p>我们重点看一下pom.xml，因为这个jar包里面除了这个没有啥重要的信息
</p><pre class="prism-token token language-javascript">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"&gt;
  &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;
  &lt;parent&gt;
    &lt;groupId&gt;org.mybatis.spring.boot&lt;/groupId&gt;
    &lt;artifactId&gt;mybatis-spring-boot&lt;/artifactId&gt;
    &lt;version&gt;1.3.1&lt;/version&gt;
  &lt;/parent&gt;
  &lt;artifactId&gt;mybatis-spring-boot-starter&lt;/artifactId&gt;
  &lt;name&gt;mybatis-spring-boot-starter&lt;/name&gt;
  &lt;dependencies&gt;
    &lt;dependency&gt;
      &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
      &lt;artifactId&gt;spring-boot-starter&lt;/artifactId&gt;
    &lt;/dependency&gt;
    &lt;dependency&gt;
      &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
      &lt;artifactId&gt;spring-boot-starter-jdbc&lt;/artifactId&gt;
    &lt;/dependency&gt;
    &lt;dependency&gt;
      &lt;groupId&gt;org.mybatis.spring.boot&lt;/groupId&gt;
      &lt;artifactId&gt;mybatis-spring-boot-autoconfigure&lt;/artifactId&gt;
    &lt;/dependency&gt;
    &lt;dependency&gt;
      &lt;groupId&gt;org.mybatis&lt;/groupId&gt;
      &lt;artifactId&gt;mybatis&lt;/artifactId&gt;
    &lt;/dependency&gt;
    &lt;dependency&gt;
      &lt;groupId&gt;org.mybatis&lt;/groupId&gt;
      &lt;artifactId&gt;mybatis-spring&lt;/artifactId&gt;
    &lt;/dependency&gt;
  &lt;/dependencies&gt;
&lt;/project&gt;
</pre><p>从上面可以看出，pom.xml文件中会引入一些jar包，其中除了引入<strong>spring-boot-starter</strong>，之外重点看一下：<strong>mybatis-spring-boot-autoconfigure</strong></p><p>我们找到<strong>mybatis-spring-boot-autoconfigure.jar</strong>文件，打开这个文件</p><figure><div class="image-block"><span class="lazy-image-holder" dataurl="https://ask.qcloudimg.com/http-save/yehe-5604447/x0xav31h.png"></span></div></figure><p>里面包含如下文件：</p><ul class="ul-level-0"><li>pom.properties  配置maven所需的项目version、groupId和artifactId</li><li>pom.xml  配置所依赖的jar包</li><li>additional-spring-configuration-metadata.json  手动添加IDE提示功能
</li><li>MANIFEST.MF 这个文件描述了该Jar文件的很多信息
</li><li>spring.factories SPI会读取的文件
</li><li>spring-configuration-metadata.json 系统自动生成的IDE提示功能
</li><li>ConfigurationCustomizer 自定义Configuration回调接口
</li><li>MybatisAutoConfiguration mybatis配置类
</li><li>MybatisProperties mybatis属性类
</li><li>SpringBootVFS 扫描嵌套的jar包中的类
</li></ul><p><strong>spring-configuration-metadata.json </strong>和 <strong>additional-spring-configuration-metadata.json</strong> 的功能差不多，我们再applicationContext.properties文件中输入spring时，会自动出现下面的配置信息可供选择，就是这个功能了。</p><figure><div class="image-block"><span class="lazy-image-holder" dataurl="https://ask.qcloudimg.com/http-save/yehe-5604447/qvgdlwbxr7.png"></span></div></figure><p>区别：</p><p>如
果pom.xml中引入了spring-boot-configuration-processor包，则会自动生成spring-
configuration-metadata.json。如果需要手动修改里面的元数据，则可以在additional-spring-
configuration-metadata.json中编辑，最终两个文件中的元数据会合并到一起。</p><p>MybatisProperties类是属性实体类</p><pre class="prism-token token language-javascript">@ConfigurationProperties(prefix = MybatisProperties.MYBATIS_PREFIX)
public class MybatisProperties {

  public static final String MYBATIS_PREFIX = "mybatis";

  private String configLocation;
  private String[] mapperLocations;
  private String typeAliasesPackage;
  private String typeHandlersPackage;
  private boolean checkConfigLocation = false;
  private ExecutorType executorType;
  private Properties configurationProperties;
  @NestedConfigurationProperty
  private Configuration configuration;

  /**
   * @since 1.1.0
   */
  public String getConfigLocation() {
    return this.configLocation;
  }

  /**
   * @since 1.1.0
   */
  public void setConfigLocation(String configLocation) {
    this.configLocation = configLocation;
  }

  @Deprecated
  public String getConfig() {
    return this.configLocation;
  }

  @Deprecated
  public void setConfig(String config) {
    this.configLocation = config;
  }

  public String[] getMapperLocations() {
    return this.mapperLocations;
  }

  public void setMapperLocations(String[] mapperLocations) {
    this.mapperLocations = mapperLocations;
  }

  public String getTypeHandlersPackage() {
    return this.typeHandlersPackage;
  }

  public void setTypeHandlersPackage(String typeHandlersPackage) {
    this.typeHandlersPackage = typeHandlersPackage;
  }

  public String getTypeAliasesPackage() {
    return this.typeAliasesPackage;
  }

  public void setTypeAliasesPackage(String typeAliasesPackage) {
    this.typeAliasesPackage = typeAliasesPackage;
  }

  public boolean isCheckConfigLocation() {
    return this.checkConfigLocation;
  }

  public void setCheckConfigLocation(boolean checkConfigLocation) {
    this.checkConfigLocation = checkConfigLocation;
  }

  public ExecutorType getExecutorType() {
    return this.executorType;
  }

  public void setExecutorType(ExecutorType executorType) {
    this.executorType = executorType;
  }

  /**
   * @since 1.2.0
   */
  public Properties getConfigurationProperties() {
    return configurationProperties;
  }

  /**
   * @since 1.2.0
   */
  public void setConfigurationProperties(Properties configurationProperties) {
    this.configurationProperties = configurationProperties;
  }

  public Configuration getConfiguration() {
    return configuration;
  }

  public void setConfiguration(Configuration configuration) {
    this.configuration = configuration;
  }

  public Resource[] resolveMapperLocations() {
    ResourcePatternResolver resourceResolver = new PathMatchingResourcePatternResolver();
    List&lt;Resource&gt; resources = new ArrayList&lt;Resource&gt;();
    if (this.mapperLocations != null) {
      for (String mapperLocation : this.mapperLocations) {
        try {
          Resource[] mappers = resourceResolver.getResources(mapperLocation);
          resources.addAll(Arrays.asList(mappers));
        } catch (IOException e) {
          // ignore
        }
      }
    }
    return resources.toArray(new Resource[resources.size()]);
  }
}
</pre><p>可以看到mybatis初始化所需要的很多属性都在这里，相当于一个javabean。
</p><p>下面重点看一下MybatisAutoConfiguration</p><pre class="prism-token token language-javascript">@org.springframework.context.annotation.Configuration
@ConditionalOnClass({ SqlSessionFactory.class, SqlSessionFactoryBean.class })
@ConditionalOnBean(DataSource.class)
@EnableConfigurationProperties(MybatisProperties.class)
@AutoConfigureAfter(DataSourceAutoConfiguration.class)
public class MybatisAutoConfiguration {

  private static final Logger logger = LoggerFactory.getLogger(MybatisAutoConfiguration.class);

  private final MybatisProperties properties;

  private final Interceptor[] interceptors;

  private final ResourceLoader resourceLoader;

  private final DatabaseIdProvider databaseIdProvider;

  private final List&lt;ConfigurationCustomizer&gt; configurationCustomizers;

  public MybatisAutoConfiguration(MybatisProperties properties,
                                  ObjectProvider&lt;Interceptor[]&gt; interceptorsProvider,
                                  ResourceLoader resourceLoader,
                                  ObjectProvider&lt;DatabaseIdProvider&gt; databaseIdProvider,
                                  ObjectProvider&lt;List&lt;ConfigurationCustomizer&gt;&gt; configurationCustomizersProvider) {
    this.properties = properties;
    this.interceptors = interceptorsProvider.getIfAvailable();
    this.resourceLoader = resourceLoader;
    this.databaseIdProvider = databaseIdProvider.getIfAvailable();
    this.configurationCustomizers = configurationCustomizersProvider.getIfAvailable();
  }

  @PostConstruct
  public void checkConfigFileExists() {
    if (this.properties.isCheckConfigLocation() &amp;&amp; StringUtils.hasText(this.properties.getConfigLocation())) {
      Resource resource = this.resourceLoader.getResource(this.properties.getConfigLocation());
      Assert.state(resource.exists(), "Cannot find config location: " + resource
          + " (please add config file or check your Mybatis configuration)");
    }
  }

  @Bean
  @ConditionalOnMissingBean
  public SqlSessionFactory sqlSessionFactory(DataSource dataSource) throws Exception {
    SqlSessionFactoryBean factory = new SqlSessionFactoryBean();
    factory.setDataSource(dataSource);
    factory.setVfs(SpringBootVFS.class);
    if (StringUtils.hasText(this.properties.getConfigLocation())) {
      factory.setConfigLocation(this.resourceLoader.getResource(this.properties.getConfigLocation()));
    }
    Configuration configuration = this.properties.getConfiguration();
    if (configuration == null &amp;&amp; !StringUtils.hasText(this.properties.getConfigLocation())) {
      configuration = new Configuration();
    }
    if (configuration != null &amp;&amp; !CollectionUtils.isEmpty(this.configurationCustomizers)) {
      for (ConfigurationCustomizer customizer : this.configurationCustomizers) {
        customizer.customize(configuration);
      }
    }
    factory.setConfiguration(configuration);
    if (this.properties.getConfigurationProperties() != null) {
      factory.setConfigurationProperties(this.properties.getConfigurationProperties());
    }
    if (!ObjectUtils.isEmpty(this.interceptors)) {
      factory.setPlugins(this.interceptors);
    }
    if (this.databaseIdProvider != null) {
      factory.setDatabaseIdProvider(this.databaseIdProvider);
    }
    if (StringUtils.hasLength(this.properties.getTypeAliasesPackage())) {
      factory.setTypeAliasesPackage(this.properties.getTypeAliasesPackage());
    }
    if (StringUtils.hasLength(this.properties.getTypeHandlersPackage())) {
      factory.setTypeHandlersPackage(this.properties.getTypeHandlersPackage());
    }
    if (!ObjectUtils.isEmpty(this.properties.resolveMapperLocations())) {
      factory.setMapperLocations(this.properties.resolveMapperLocations());
    }

    return factory.getObject();
  }

  @Bean
  @ConditionalOnMissingBean
  public SqlSessionTemplate sqlSessionTemplate(SqlSessionFactory sqlSessionFactory) {
    ExecutorType executorType = this.properties.getExecutorType();
    if (executorType != null) {
      return new SqlSessionTemplate(sqlSessionFactory, executorType);
    } else {
      return new SqlSessionTemplate(sqlSessionFactory);
    }
  }

  public static class AutoConfiguredMapperScannerRegistrar
      implements BeanFactoryAware, ImportBeanDefinitionRegistrar, ResourceLoaderAware {

    private BeanFactory beanFactory;

    private ResourceLoader resourceLoader;

    @Override
    public void registerBeanDefinitions(AnnotationMetadata importingClassMetadata, BeanDefinitionRegistry registry) {

      ClassPathMapperScanner scanner = new ClassPathMapperScanner(registry);

      try {
        if (this.resourceLoader != null) {
          scanner.setResourceLoader(this.resourceLoader);
        }

        List&lt;String&gt; packages = AutoConfigurationPackages.get(this.beanFactory);
        if (logger.isDebugEnabled()) {
          for (String pkg : packages) {
            logger.debug("Using auto-configuration base package '{}'", pkg);
          }
        }

        scanner.setAnnotationClass(Mapper.class);
        scanner.registerFilters();
        scanner.doScan(StringUtils.toStringArray(packages));
      } catch (IllegalStateException ex) {
        logger.debug("Could not determine auto-configuration package, automatic mapper scanning disabled.", ex);
      }
    }

    @Override
    public void setBeanFactory(BeanFactory beanFactory) throws BeansException {
      this.beanFactory = beanFactory;
    }

    @Override
    public void setResourceLoader(ResourceLoader resourceLoader) {
      this.resourceLoader = resourceLoader;
    }
  }

  @org.springframework.context.annotation.Configuration
  @Import({ AutoConfiguredMapperScannerRegistrar.class })
  @ConditionalOnMissingBean(MapperFactoryBean.class)
  public static class MapperScannerRegistrarNotFoundConfiguration {

    @PostConstruct
    public void afterPropertiesSet() {
      logger.debug("No {} found.", MapperFactoryBean.class.getName());
    }
  }

}</pre><p>这个类就是一个Configuration（配置类），它里面定义很多bean，其中最重要的就是SqlSessionFactory的bean实例，该实例是mybatis的核心功能，用它创建SqlSession，对数据库进行CRUD操作。</p><p>除此之外，MybatisAutoConfiguration类还包含了：</p><ul class="ul-level-0"><li>@ConditionalOnClass 配置了只有包含SqlSessionFactory.class和SqlSessionFactoryBean.class，该配置类才生效
</li><li>@ConditionalOnBean 配置了只有包含dataSource实例时，该配置类才生效
</li><li>@EnableConfigurationProperties 该注解会自动填充MybatisProperties实例中的属性
</li><li>AutoConfigureAfter 配置了该配置类在DataSourceAutoConfiguration类之后自动配置。</li></ul><p>这些注解都是一些辅助功能，决定Configuration是否生效，当然这些注解不是必须的。</p><p>接下来，重点看看spring.factories文件有啥内容</p><pre class="prism-token token language-javascript">org.springframework.boot.autoconfigure.EnableAutoConfiguration=\
org.mybatis.spring.boot.autoconfigure.MybatisAutoConfiguration</pre><p>里面只有一行配置，即key为EnableAutoConfiguration，value为MybatisAutoConfiguration。</p><p>好了，介绍了这么多东西，现在我们来总结一下，</p><p>starter几个要素如下图所示：</p><figure><div class="image-block"><span class="lazy-image-holder" dataurl="https://ask.qcloudimg.com/http-save/yehe-5604447/ak2iq1bf9f.png"></span></div></figure><p>编写starter需要哪些步骤：</p><p><strong>1.需要定义一个名称为xxx-spring-boot-starter的空项目，里面不包含任何代码，可以有pom.xml和pom.properties文件。</strong></p><p><strong>2.pom.xml文件中包含了名称为xxx-spring-boot-autoconfigure的项目</strong></p><p><strong>3.xxx-
spring-boot-autoconfigure项目中包含了名称为xxxAutoConfiguration的类，该类可以定义一些bean实例。
当然，Configuration类上可以打一些如：ConditionalOnClass、ConditionalOnBean、
EnableConfigurationProperties等注解。</strong></p><p><strong>4.需要在spring.factories文件中增加key为EnableAutoConfiguration，value为</strong></p><p><strong>xxxAutoConfiguration。</strong></p><p>我们试着按照这四步，自己编写一个starter看看能否成功，验证一下总结的内容是否正确。</p><h2 id="%E4%B8%89%E3%80%81%E7%BC%96%E5%86%99%E8%87%AA%E5%B7%B1%E7%9A%84starter" name="%E4%B8%89%E3%80%81%E7%BC%96%E5%86%99%E8%87%AA%E5%B7%B1%E7%9A%84starter"><strong>三、编写自己的starter</strong></h2><ol class="ol-level-0"><li><strong>先创建一个空项目</strong>


该项目名称为id-generate-starter，注意为了方便我把项目重命名了，原本应该是叫id-generate-spring-boot-starter的，如下图所示
</li></ol><figure><div class="image-block"><span class="lazy-image-holder" dataurl="https://ask.qcloudimg.com/http-save/yehe-5604447/8oet06ivqc.png"></span></div></figure><p>
pom.xml文件定义如下：</p><pre class="prism-token token language-javascript">&lt;?xml version="1.0" encoding="UTF-8"?&gt;

&lt;project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"&gt;
    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;

    &lt;version&gt;1.3.1&lt;/version&gt;
    &lt;groupId&gt;com.sue&lt;/groupId&gt;
    &lt;artifactId&gt;id-generate-spring-boot-starter&lt;/artifactId&gt;
    &lt;name&gt;id-generate-spring-boot-starter&lt;/name&gt;
    &lt;dependencies&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;com.sue&lt;/groupId&gt;
            &lt;artifactId&gt;id-generate-spring-boot-autoconfigure&lt;/artifactId&gt;
            &lt;version&gt;1.3.1&lt;/version&gt;
        &lt;/dependency&gt;
    &lt;/dependencies&gt;
&lt;/project&gt;</pre><p>我们看到，它只引入了id-generate-spring-boot-autoconfigure。当然如果有需要这里还可以引入多个autoconfigure或者多个其他jar包或者。</p><p><strong>2.创建一个名称为id-generate-autoconfigure的项目</strong></p><p>同样为了方便我把项目重命名了，原本是叫id-generate-spring-boot-autoconfigure，如下图所示：</p><figure><div class="image-block"><span class="lazy-image-holder" dataurl="https://ask.qcloudimg.com/http-save/yehe-5604447/hcqgq5d2mx.png"></span></div></figure><p>该项目当中包含：pom.xml、spring.factories、IdGenerateAutoConfiguration、IdGenerateService 和 IdProperties 这5个关键文件，下面我们逐一看看。</p><p>先从pom.xml</p><pre class="prism-token token language-javascript">&lt;?xml version="1.0" encoding="UTF-8"?&gt;

&lt;project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"&gt;

    &lt;parent&gt;
        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
        &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;
        &lt;version&gt;2.0.4.RELEASE&lt;/version&gt;
    &lt;/parent&gt;
    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;

    &lt;version&gt;1.3.1&lt;/version&gt;
    &lt;groupId&gt;com.sue&lt;/groupId&gt;
    &lt;artifactId&gt;id-generate-spring-boot-autoconfigure&lt;/artifactId&gt;
    &lt;name&gt;id-generate-spring-boot-autoconfigure&lt;/name&gt;


    &lt;dependencies&gt;

        &lt;dependency&gt;
            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
            &lt;artifactId&gt;spring-boot-starter&lt;/artifactId&gt;
        &lt;/dependency&gt;

        &lt;!-- Compile dependencies --&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
            &lt;artifactId&gt;spring-boot-autoconfigure&lt;/artifactId&gt;
        &lt;/dependency&gt;


        &lt;!-- @ConfigurationProperties annotation processing (metadata for IDEs) --&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
            &lt;artifactId&gt;spring-boot-configuration-processor&lt;/artifactId&gt;
            &lt;optional&gt;true&lt;/optional&gt;
        &lt;/dependency&gt;
    &lt;/dependencies&gt;


    &lt;build&gt;
        &lt;plugins&gt;
            &lt;plugin&gt;
                &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;
                &lt;artifactId&gt;maven-compiler-plugin&lt;/artifactId&gt;
                &lt;configuration&gt;
                    &lt;source&gt;1.8&lt;/source&gt;
                    &lt;target&gt;1.8&lt;/target&gt;
                &lt;/configuration&gt;
            &lt;/plugin&gt;
        &lt;/plugins&gt;
    &lt;/build&gt;
&lt;/project&gt;
</pre><p>我们可以看到，这个文件比较简单就引入了：</p><ul class="ul-level-0"><li>spring-boot-starter    springboot的相关jar包

</li><li>spring-boot-autoconfigure    springboot自动配置相关jar包

</li><li>spring-boot-configuration-processor  springboot生成IDE提示功能相关jar包</li></ul><p>重点看看spring.factories文件</p><pre class="prism-token token language-javascript">org.springframework.boot.autoconfigure.EnableAutoConfiguration=com.sue.IdGenerateAutoConfiguration</pre><p>它里面只包含一行配置，其中key是EnableAutoConfiguration，value是IdGenerateAutoConfiguration。</p><p>再重点看一下IdGenerateAutoConfiguration</p><pre class="prism-token token language-javascript">@ConditionalOnClass(IdProperties.class)
@EnableConfigurationProperties(IdProperties.class)
@Configuration
public class IdGenerateAutoConfiguration {

    @Autowired
    private IdProperties properties;

    @Bean
    public IdGenerateService idGenerateService() {
        return new IdGenerateService(properties.getWorkId());
    }
}</pre><p>该类是一个使用了@Configuration注解标记为了配置类，生效的条件是@ConditionalOnClass注解中检测
到包含IdProperties.class。并且使用@EnableConfigurationProperties注解会自动注入
IdProperties的实例。</p><p>此外，最关键的点是该类里面创建了idGenerateService的bean实例，这是自动配置的精髓。</p><p>再看看IdGenerateService</p><pre class="prism-token token language-javascript">public class IdGenerateService {

    private Long workId;

    public IdGenerateService(Long workId) {
        this.workId = workId;
    }


    public Long generate() {
        return new Random().nextInt(100) + this.workId;
    }
}</pre><p>我们可以看到它是一个普通的类，甚至都没有使用@Service注解，里面有个generate方法，根据workId的值和随机数动态生成id。</p><p>最后看看IdProperties</p><pre class="prism-token token language-javascript">@ConfigurationProperties(prefix = IdProperties.PREFIX)
public class IdProperties {


    public static final String PREFIX = "sue";

    private Long workId;

    public Long getWorkId() {
        return workId;
    }

    public void setWorkId(Long workId) {
        this.workId = workId;
    }
}</pre><p>它是一个配置实体类，里面包含了相关的配置文件。使用@ConfigurationProperties注解，会自动把
application.properties文件中以sue开通的，参数名称跟IdProperties中一样的参数值，自动注入到
IdProperties对象中。</p><p><strong>3.创建一个名称为id-generate-test的项目</strong></p><p>这个项目主要用于测试。</p><figure><div class="image-block"><span class="lazy-image-holder" dataurl="https://ask.qcloudimg.com/http-save/yehe-5604447/becxwx9a2w.png"></span></div></figure><p>该项目里面包含：pom.xml、application.properties、Application 和 TestRunner 文件。</p><p>先看看pom.xml文件
</p><pre class="prism-token token language-javascript">&lt;?xml version="1.0" encoding="UTF-8"?&gt;

&lt;project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"&gt;

    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;

    &lt;version&gt;1.3.1&lt;/version&gt;
    &lt;groupId&gt;com.sue&lt;/groupId&gt;
    &lt;artifactId&gt;spring-boot-id-generate-test&lt;/artifactId&gt;
    &lt;name&gt;spring-boot-id-generate-test&lt;/name&gt;


    &lt;dependencies&gt;

        &lt;dependency&gt;
            &lt;groupId&gt;com.sue&lt;/groupId&gt;
            &lt;artifactId&gt;id-generate-spring-boot-starter&lt;/artifactId&gt;
            &lt;version&gt;1.3.1&lt;/version&gt;
        &lt;/dependency&gt;
    &lt;/dependencies&gt;
&lt;/project&gt;
</pre><p>由于只测试刚刚定义的id生成功能，所以只引入的id-generate-spring-boot-starter jar包。</p><p>application.properties配置资源文件</p><pre class="prism-token token language-javascript">sue.workId=123</pre><p>只有一行配置，因为我们的IdProperties中目前只需要这一个参数。</p><p>Application是测试程序启动类</p><pre class="prism-token token language-javascript">@SpringBootApplication
public class Application {

    public static void main(String[] args) {
        SpringApplication.run(Application.class, args);
    }
}</pre><p>很简单，就是一个普通的springboot启动类</p><p>TestRunner是我们的测试类</p><pre class="prism-token token language-javascript">@Component
public class TestRunner implements ApplicationRunner {

    @Autowired
    private IdGenerateService idGenerateService;

    public void run(ApplicationArguments args) throws Exception {
        Long sysNo = idGenerateService.generate();
        System.out.println(sysNo);
    }
}</pre><p>它实现了ApplicationRunner接口，所以在springboot启动的时候会调用该类的run方法。</p><p>好了，所有自定义starter的代码和测试代码都已经就绪。接下，运行一下Application类的main方法。</p><p>运行结果：</p><pre class="prism-token token language-javascript">176</pre><p>验证成功了</p><p>接下来，我们分析一下starter的底层实现。</p><h2 id="%E5%9B%9B%E3%80%81starter%E7%9A%84%E5%BA%95%E5%B1%82%E5%AE%9E%E7%8E%B0" name="%E5%9B%9B%E3%80%81starter%E7%9A%84%E5%BA%95%E5%B1%82%E5%AE%9E%E7%8E%B0"><strong>四、starter的底层实现</strong></h2><p>通过上面编写自己的starter的例子，相信大家对starter的认识进一步加强了，现在带大家分析一下starter的底层是如何实现的。
</p><p>id-generate-starter.jar是一个空项目，依赖于 
id-generate-autoconfiguration.jar。 
id-generate-starter.jar是一个入口，或者说如果大家知道门面模式，它其实也是一个门面，其他业务系统想引入相应的功能，必须要通
过这个门面。
</p><p>我们重点分析一下 id-generate-autoconfiguration.jar</p><p>该jar包核心内容是：IdGenerateConfiguration，这个配置类中创建了IdGenerateService对象，IdGenerateService是我们所需要自动配置的具体功能。</p><p><strong>接下来一个最重要的问题：</strong></p><p>IdGenerateConfiguration为什么会自动加载的呢？</p><p>还记得我们定义的spring.factories文件不？</p><pre class="prism-token token language-javascript">org.springframework.boot.autoconfigure.EnableAutoConfiguration=com.sue.IdGenerateAutoConfiguration</pre><p>它里面只包含一行配置，其中key是EnableAutoConfiguration，value是IdGenerateAutoConfiguration。</p><p>要搞明白这个过程，要从Application类的@SpringBootApplication注解开始。</p><pre class="prism-token token language-javascript">@Target(ElementType.TYPE)
@Retention(RetentionPolicy.RUNTIME)
@Documented
@Inherited
@SpringBootConfiguration
@EnableAutoConfiguration
@ComponentScan(excludeFilters = {
    @Filter(type = FilterType.CUSTOM, classes = TypeExcludeFilter.class),
    @Filter(type = FilterType.CUSTOM, classes = AutoConfigurationExcludeFilter.class) })
public @interface SpringBootApplication {


  @AliasFor(annotation = EnableAutoConfiguration.class)
  Class&lt;?&gt;[] exclude() default {};

  @AliasFor(annotation = EnableAutoConfiguration.class)
  String[] excludeName() default {};

  @AliasFor(annotation = ComponentScan.class, attribute = "basePackages")
  String[] scanBasePackages() default {};

  @AliasFor(annotation = ComponentScan.class, attribute = "basePackageClasses")
  Class&lt;?&gt;[] scanBasePackageClasses() default {};

}</pre><p>从上面可以看出该注解里面包含了@EnableAutoConfiguration注解。</p><pre class="prism-token token language-javascript">@Target(ElementType.TYPE)
@Retention(RetentionPolicy.RUNTIME)
@Documented
@Inherited
@AutoConfigurationPackage
@Import(AutoConfigurationImportSelector.class)
public @interface EnableAutoConfiguration {

  String ENABLED_OVERRIDE_PROPERTY = "spring.boot.enableautoconfiguration";

  Class&lt;?&gt;[] exclude() default {};

  String[] excludeName() default {};

}</pre><p>@EnableAutoConfiguration注解会引入AutoConfigurationImportSelector类。</p><p>该类的selectImports方法一个关键方法</p><pre class="prism-token token language-javascript">  @Override
  public String[] selectImports(AnnotationMetadata annotationMetadata) {
    //配置有没有配置spring.boot.enableautoconfiguration开关，默认为true
    //如果为false，则不执行自动配置的功能，直接返回
    if (!isEnabled(annotationMetadata)) {
      return NO_IMPORTS;
    }
    //找spring-autoconfigure-metadata.properties中的元素
    AutoConfigurationMetadata autoConfigurationMetadata = AutoConfigurationMetadataLoader
        .loadMetadata(this.beanClassLoader);
    //获取EnableAutoConfiguration注解中的属性 
    AnnotationAttributes attributes = getAttributes(annotationMetadata);
    //获取工程下所有配置key为EnableAutoConfiguration的值，即IdGenerateConfiguration等类。
    List&lt;String&gt; configurations = getCandidateConfigurations(annotationMetadata,
        attributes);
    //删除重复的值    
    configurations = removeDuplicates(configurations);
    //获取需要排除的规则列表
    Set&lt;String&gt; exclusions = getExclusions(annotationMetadata, attributes);
    //检查
    checkExcludedClasses(configurations, exclusions);
    //删除需要排除的值
    configurations.removeAll(exclusions);
    //根据配置文件中配置的开关，过滤一部分不满足条件的值
    configurations = filter(configurations, autoConfigurationMetadata);
    fireAutoConfigurationImportEvents(configurations, exclusions);
    return StringUtils.toStringArray(configurations);
  }</pre><p>这里就是starter能够自动配置的秘密，这里我不打算深入介绍，因为我后面会分享一个专题：spring自动配置的那些秘密。
</p><p>此外，有些朋友看其他人定义的springboot starter可能会有疑惑。</p><p>我举几个例子：</p><p>先看看druid-spring-boot-starter</p><figure><div class="image-block"><span class="lazy-image-holder" dataurl="https://ask.qcloudimg.com/http-save/yehe-5604447/zvik9u1otx.png"></span></div></figure><p>alibaba定义的druid-spring-boot-starter只有xxx-spring-boot-starter.jar文件，而没有xxx-spring-boot-autoconfigure.jar文件。</p><p>再看看spring-boot-starter-jdbc</p><figure><div class="image-block"><span class="lazy-image-holder" dataurl="https://ask.qcloudimg.com/http-save/yehe-5604447/nse12j2g4z.png"></span></div></figure><p>更神奇的是这个文件中连pom.xml都没有，一脸懵逼。。。。。。。</p><p>是不是我讲错了。
</p><p>其实没有。</p><p><strong>springboot的原则是约定优于配置。</strong></p><p>从spring-
boot-starter-jdbc内部空实现来看，它的约定是要把xxx-spring-boot-starter.jar和xxx-spring-
boot-autoconfigure.jar区分开的。个人认为，alibaba定义得并不好，没有遵照springboot的约定，虽然功能不受影
响。</p><p>而springboot自己定义的spring-boot-starter-jdbc为什么连pom.xml文件也没有呢？</p><p>它不需要依赖xxx-spring-boot-autoconfigure.jar文件吗？</p><p>因为，springboot把所有的自动配置的类都统一放到spring-boot-autoconfigure jar包下面了</p><figure><div class="image-block"><span class="lazy-image-holder" dataurl="https://ask.qcloudimg.com/http-save/yehe-5604447/fd8b4h0il1.png"></span></div></figure><figure><div class="image-block"><span class="lazy-image-holder" dataurl="https://ask.qcloudimg.com/http-save/yehe-5604447/b4vuarhqks.png"></span></div></figure><p>springboot这样集中管理自动配置，而不需要从各个子包中遍历，我个人认为是为了查找效率。</p><p>我们最后再看看spring-cloud-starter-openfegin
</p><figure><div class="image-block"><span class="lazy-image-holder" dataurl="https://ask.qcloudimg.com/http-save/yehe-5604447/rwuax5xk67.png"></span></div></figure><p>明显看到，它是遵循了我们说的原则的。
</p><p>除此之外，还有一个原则一起提一下。</p><p>springboot和springcloud系列定义jar包的名称是 :</p><p>spring-boot-starter-xxx.jar</p><p>spring-cloud-starter-xxx.jar</p><p>而我们自己的项目定义的jar应该是：</p><p>xxx-spring-boot-starter.jar</p><p>欢迎朋友们关注我的公众账号：苏三说技术，如果大家有一些问题可以给我留言。谢谢大家。</p><p></p><h2></h2></div><div class="com-article-statement"><p>本文分享自微信公众号 - <!-- -->苏三说技术（gh_9f551dfec941）<!-- -->，作者：因为热爱所以坚持ing</p><p>原文出处及转载信息见文内详细说明，如有侵权，请联系 <!-- -->yunjia_community@tencent.com<!-- --> 删除。</p><p>原始发表时间：<!-- -->2020-09-03</p><p>本文参与<a href="https://cloud.tencent.com/developer/support-plan" class="com-link">腾讯云自媒体分享计划</a>，欢迎正在阅读的你也加入，一起分享。</p></div></div><div class="com-markdown-collpase-toggle"><a href="javascript:;" class="toggle-link">展开阅读全文</a></div></div><div class="col-article-panel-subhd"><h3 class="col-article-panel-subtitle">文章来自专栏</h3></div><div class="com-2-expert-panel com-2-expert-panel-column article-expert-panel weak"><a href="https://cloud.tencent.com/developer/column/89029" class="com-2-expert-panel-link"></a><div class="com-2-expert-panel-inner"><div class="com-2-expert-panel-object"><div class="com-2-avatar"><div class="com-2-avatar-object"><i class="com-2-avatar-image" style="background-image:url(https://ask.qcloudimg.com/http-save/yehe-5604447/vpcm3wrjk0.png?imageView2/2/w/92)"></i></div></div></div><div class="com-2-expert-panel-main"><div class="com-2-expert-panel-main-inner"><div class="com-2-expert-panel-main-info"><h3 class="com-2-expert-panel-tit"><span>苏三说技术</span></h3><div class="com-2-expert-panel-detail"><div class="com-2-amount-data"><div class="com-2-amount-data-item"><span class="com-2-amount-data-num">47</span><span class="com-2-amount-data-tit"> 篇文章</span></div><div class="com-2-amount-data-item"><span class="com-2-amount-data-num">13</span><span class="com-2-amount-data-tit"> 人关注</span></div></div></div></div><div class="com-2-expert-panel-btn"><button type="button" class="c-btn com-2-btn c-btn-hole"><span class="btn-text">订阅</span></button></div></div></div></div></div><div class="com-comments"><div class="com-comments-head com-module-head"><span class="com-module-title">评论 (<!-- -->0<!-- -->)</span><a href="javascript:;" class="com-write-comm"><i class="icon"></i><span>写评论</span></a></div><div><div class="com-comments-content com-module-content"></div></div></div></div><div class="com-module com-module-icon com-gap without-icon"><div class="com-module-head"><span class="com-module-title">相关文章</span></div></div><div class="com-2-m-footer"><div class="footer-qr"><div class="footer-qr-object"><img class="footer-qr-image" src="%E8%80%81%E5%8F%B8%E6%9C%BA%E6%89%8B%E6%8A%8A%E6%89%8B%E6%95%99%E4%BD%A0%E7%BC%96%E5%86%99%E8%87%AA%E5%B7%B1%E7%9A%84springboot%20starter%20-%20%E4%BA%91+%E7%A4%BE%E5%8C%BA%20-%20%E8%85%BE%E8%AE%AF%E4%BA%91_files/wechat-qr.htm"></div><p class="footer-qr-info"><span class="footer-qr-text">长按识别或截图保存</span><span class="footer-qr-text">关注云+社区</span></p></div><div class="footer-copyright"><p class="footer-copyright-info"><span class="footer-copyright-text">Copyright © 2013-2021</span><span class="footer-copyright-text">Tencent Cloud. All Rights Reserved.</span><span class="footer-copyright-text">腾讯云 版权所有</span></p></div></div></div><footer class="com-2-article-footer"><div class="footer-main"><a href="javascript:;" class="footer-item"><div class="footer-item-icon"><i class="com-i-star"></i></div><div class="footer-item-text">点赞</div><div class="footer-item-Point"> <!-- -->4</div></a><a href="javascript:;" class="footer-item"><div class="footer-item-icon"><i class="com-i-comment"></i></div><div class="footer-item-text">评论</div>0</a><a href="javascript:;" class="footer-item"><div class="footer-item-icon"><i class="com-i-menu"></i></div><div class="footer-item-text">目录</div></a></div><div class="footer-extra"><button type="button" class="com-2-btn c-btn"><span class="btn-text">转到阅读清单</span></button></div></footer></div></div><div id="misc-root"></div><div id="dialog-root" style="background:transparent"></div><script>window.isServerContext = false; window.isClientContext = true;</script><script>window.$serverTime = 1621996871867; window.$clientTime = Date.now();</script><script>window.$ua = {"ua":"Mozilla/5.0 (Linux; Android 6.0.1; Nexus 5X Build/MMB29P) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/90.0.4430.97 Mobile Safari/537.36 (compatible; Googlebot/2.1; +http://www.google.com/bot.html)","browser":{"name":"Chrome","version":"90.0.4430.97","major":"90"},"engine":{"name":"Blink","version":"90.0.4430.97"},"os":{"name":"Android","version":"6.0.1"},"device":{"vendor":"LG","model":"Nexus 5","type":"mobile"},"cpu":{}};</script><script src="%E8%80%81%E5%8F%B8%E6%9C%BA%E6%89%8B%E6%8A%8A%E6%89%8B%E6%95%99%E4%BD%A0%E7%BC%96%E5%86%99%E8%87%AA%E5%B7%B1%E7%9A%84springboot%20starter%20-%20%E4%BA%91+%E7%A4%BE%E5%8C%BA%20-%20%E8%85%BE%E8%AE%AF%E4%BA%91_files/polyfill.htm"></script><script src="%E8%80%81%E5%8F%B8%E6%9C%BA%E6%89%8B%E6%8A%8A%E6%89%8B%E6%95%99%E4%BD%A0%E7%BC%96%E5%86%99%E8%87%AA%E5%B7%B1%E7%9A%84springboot%20starter%20-%20%E4%BA%91+%E7%A4%BE%E5%8C%BA%20-%20%E8%85%BE%E8%AE%AF%E4%BA%91_files/react.htm"></script><script src="%E8%80%81%E5%8F%B8%E6%9C%BA%E6%89%8B%E6%8A%8A%E6%89%8B%E6%95%99%E4%BD%A0%E7%BC%96%E5%86%99%E8%87%AA%E5%B7%B1%E7%9A%84springboot%20starter%20-%20%E4%BA%91+%E7%A4%BE%E5%8C%BA%20-%20%E8%85%BE%E8%AE%AF%E4%BA%91_files/react-dom.htm"></script><script src="%E8%80%81%E5%8F%B8%E6%9C%BA%E6%89%8B%E6%8A%8A%E6%89%8B%E6%95%99%E4%BD%A0%E7%BC%96%E5%86%99%E8%87%AA%E5%B7%B1%E7%9A%84springboot%20starter%20-%20%E4%BA%91+%E7%A4%BE%E5%8C%BA%20-%20%E8%85%BE%E8%AE%AF%E4%BA%91_files/jquery-3.htm"></script><script src="%E8%80%81%E5%8F%B8%E6%9C%BA%E6%89%8B%E6%8A%8A%E6%89%8B%E6%95%99%E4%BD%A0%E7%BC%96%E5%86%99%E8%87%AA%E5%B7%B1%E7%9A%84springboot%20starter%20-%20%E4%BA%91+%E7%A4%BE%E5%8C%BA%20-%20%E8%85%BE%E8%AE%AF%E4%BA%91_files/base.htm"></script><script src="%E8%80%81%E5%8F%B8%E6%9C%BA%E6%89%8B%E6%8A%8A%E6%89%8B%E6%95%99%E4%BD%A0%E7%BC%96%E5%86%99%E8%87%AA%E5%B7%B1%E7%9A%84springboot%20starter%20-%20%E4%BA%91+%E7%A4%BE%E5%8C%BA%20-%20%E8%85%BE%E8%AE%AF%E4%BA%91_files/hls.htm"></script><script src="%E8%80%81%E5%8F%B8%E6%9C%BA%E6%89%8B%E6%8A%8A%E6%89%8B%E6%95%99%E4%BD%A0%E7%BC%96%E5%86%99%E8%87%AA%E5%B7%B1%E7%9A%84springboot%20starter%20-%20%E4%BA%91+%E7%A4%BE%E5%8C%BA%20-%20%E8%85%BE%E8%AE%AF%E4%BA%91_files/tcplayer.htm"></script><script src="%E8%80%81%E5%8F%B8%E6%9C%BA%E6%89%8B%E6%8A%8A%E6%89%8B%E6%95%99%E4%BD%A0%E7%BC%96%E5%86%99%E8%87%AA%E5%B7%B1%E7%9A%84springboot%20starter%20-%20%E4%BA%91+%E7%A4%BE%E5%8C%BA%20-%20%E8%85%BE%E8%AE%AF%E4%BA%91_files/draft-master-v1_002.htm"></script><script src="%E8%80%81%E5%8F%B8%E6%9C%BA%E6%89%8B%E6%8A%8A%E6%89%8B%E6%95%99%E4%BD%A0%E7%BC%96%E5%86%99%E8%87%AA%E5%B7%B1%E7%9A%84springboot%20starter%20-%20%E4%BA%91+%E7%A4%BE%E5%8C%BA%20-%20%E8%85%BE%E8%AE%AF%E4%BA%91_files/cos-js-sdk-v5.htm"></script><script src="%E8%80%81%E5%8F%B8%E6%9C%BA%E6%89%8B%E6%8A%8A%E6%89%8B%E6%95%99%E4%BD%A0%E7%BC%96%E5%86%99%E8%87%AA%E5%B7%B1%E7%9A%84springboot%20starter%20-%20%E4%BA%91+%E7%A4%BE%E5%8C%BA%20-%20%E8%85%BE%E8%AE%AF%E4%BA%91_files/api.htm"></script><script src="%E8%80%81%E5%8F%B8%E6%9C%BA%E6%89%8B%E6%8A%8A%E6%89%8B%E6%95%99%E4%BD%A0%E7%BC%96%E5%86%99%E8%87%AA%E5%B7%B1%E7%9A%84springboot%20starter%20-%20%E4%BA%91+%E7%A4%BE%E5%8C%BA%20-%20%E8%85%BE%E8%AE%AF%E4%BA%91_files/wechatJsSdk.htm"></script><script src="%E8%80%81%E5%8F%B8%E6%9C%BA%E6%89%8B%E6%8A%8A%E6%89%8B%E6%95%99%E4%BD%A0%E7%BC%96%E5%86%99%E8%87%AA%E5%B7%B1%E7%9A%84springboot%20starter%20-%20%E4%BA%91+%E7%A4%BE%E5%8C%BA%20-%20%E8%85%BE%E8%AE%AF%E4%BA%91_files/jweixin-1.htm"></script><script src="%E8%80%81%E5%8F%B8%E6%9C%BA%E6%89%8B%E6%8A%8A%E6%89%8B%E6%95%99%E4%BD%A0%E7%BC%96%E5%86%99%E8%87%AA%E5%B7%B1%E7%9A%84springboot%20starter%20-%20%E4%BA%91+%E7%A4%BE%E5%8C%BA%20-%20%E8%85%BE%E8%AE%AF%E4%BA%91_files/app.htm"></script><script>
window.$render({"scenes":{"column":{"articleDetail":{"pageStatus":"none","articleEntities":{"1718134":{"fetchStatus":"loaded","data":{"id":1718134,"articleId":1718134,"title":"老司机手把手教你编写自己的springboot starter","content":"entityMap|0|type|LINK|mutability|MUTABLE|data|url|http:\u002F\u002Fmp.weixin.qq.com\u002Fs?__biz=MzUxODkzNTQ3Nw==&mid=2247484174&idx=2&sn=56764cbc8d038c7e60205bf5ad98bed7&chksm=f98005d4cef78cc273775dd106e8b17f7f60cc50d448b56704a7723336d75242e2d7edefdacc&scene=21#wechat_redirect|1|IMAGE|IMMUTABLE|imageUrl|https:\u002F\u002Fask.qcloudimg.com\u002Fhttp-save\u002Fyehe-5604447\u002Ftxi1gdak8m.png|imageAlt|2|https:\u002F\u002Fask.qcloudimg.com\u002Fhttp-save\u002Fyehe-5604447\u002Fx0xav31h.png|3|https:\u002F\u002Fask.qcloudimg.com\u002Fhttp-save\u002Fyehe-5604447\u002Fqvgdlwbxr7.png|4|https:\u002F\u002Fask.qcloudimg.com\u002Fhttp-save\u002Fyehe-5604447\u002Fak2iq1bf9f.png|5|https:\u002F\u002Fask.qcloudimg.com\u002Fhttp-save\u002Fyehe-5604447\u002F8oet06ivqc.png|6|https:\u002F\u002Fask.qcloudimg.com\u002Fhttp-save\u002Fyehe-5604447\u002Fhcqgq5d2mx.png|7|https:\u002F\u002Fask.qcloudimg.com\u002Fhttp-save\u002Fyehe-5604447\u002Fbecxwx9a2w.png|8|https:\u002F\u002Fask.qcloudimg.com\u002Fhttp-save\u002Fyehe-5604447\u002Fzvik9u1otx.png|9|https:\u002F\u002Fask.qcloudimg.com\u002Fhttp-save\u002Fyehe-5604447\u002Fnse12j2g4z.png|10|https:\u002F\u002Fask.qcloudimg.com\u002Fhttp-save\u002Fyehe-5604447\u002Ffd8b4h0il1.png|11|https:\u002F\u002Fask.qcloudimg.com\u002Fhttp-save\u002Fyehe-5604447\u002Fb4vuarhqks.png|12|https:\u002F\u002Fask.qcloudimg.com\u002Fhttp-save\u002Fyehe-5604447\u002Frwuax5xk67.png|blocks|key|fric7|text|继上一篇《面试时被问到单例模式，怎么回答才能让面试官眼前一亮？》之后，我打算对springboot的部分功能做一下介绍。因为现在springboot使用的人越来越多，已经成了java行业主流的框架。|unstyled|depth|inlineStyleRanges|offset|length|style|UNDERLINE|BOLD|CODE|entityRanges|dsjq5|本文先介绍springboot的+starter机制，从以下方向着手：|eit1a|1.为什么要用starter\n|d55r1|2.starter的几个要素|ek06n|3.编写自己的starter|av218|4.starter的底层实现|f6bpr|一、为什么要用starter|header-two|735s3|在springboot还没有出来之前，我们使用spring开发项目。如果程序需要连接数据库，我们一般会使用hibernate或mybatis等ORM框架，这里我以mybatis为例，具体的操作步骤如下：\n|header-four|3kvhk|1.+到maven仓库去找需要引入的mybatis+jar包，选取合适的版本。\n|22bh2|2.+到maven仓库去找mybatis-spring整合的jar包，选取合适的版本。|3mq7|3.+在spring的applicationContext.xml文件中配置dataSource和mybatis相关信息。\n|cb6km|当然有些朋友可能会指正，不是还需要引入数据库驱动包吗？|794cr|确实需要引入，但数据库驱动有很多，比如：mysql、oracle、sqlserver，这不属于mybatis的范畴，使用者可以根据项目的实际情况单独引入。|b8bpv|如果程序只是需要连接数据库这一个功能还好，按上面的步骤做基本可以满足需求。但是，连接数据库可能只是庞大的项目体系中一个环节，实际项目中往往更复杂，需要引入更多的功能，比如：连接redis、连接mongodb、使用rocketmq、使用excel功能等等。\n|8v2hh|引入这些功能的话，需要再把上面的步骤再重复一次，工作量无形当中增加了不少，而且有很多重复的工作。\n|cdbhf|另外，还是有个问题，每次到要到maven中找合适的版本，如果哪次找的mybatis+jar包+和+mybatis-spring+jar包版本不兼容，程序不是会出现问题？|15u92|springboot为了解决以上两个问题引入了starter机制。\n|bmmd5|二、starter的几个要素|1nn4|我们首先一起看看mybatis-spring-boot-starter.jar是如何定义的|5ggin|?|atomic|du1r2|可以看到它的META-INF目录下只包含了：|6c67r|pom.protperties++配置maven所需的项目version、groupId和artifactId|unordered-list-item|38l9o|pom.xml++配置所依赖的jar包\n|dfbsg|MANIFEST.MF+这个文件描述了该Jar文件的很多信息|21gnu|spring.provides+配置所依赖的artifactId，给IDE使用的，没有其他的作用|2pfr1|注意一下，没有一行代码。|fsefs|我们重点看一下pom.xml，因为这个jar包里面除了这个没有啥重要的信息\n|7ug|\u003C?xml+version=\"1.0\"+encoding=\"UTF-8\"?\u003E\n\u003Cproject+xmlns=\"http:\u002F\u002Fmaven.apache.org\u002FPOM\u002F4.0.0\"+xmlns:xsi=\"http:\u002F\u002Fwww.w3.org\u002F2001\u002FXMLSchema-instance\"+xsi:schemaLocation=\"http:\u002F\u002Fmaven.apache.org\u002FPOM\u002F4.0.0+http:\u002F\u002Fmaven.apache.org\u002Fxsd\u002Fmaven-4.0.0.xsd\"\u003E\n++\u003CmodelVersion\u003E4.0.0\u003C\u002FmodelVersion\u003E\n++\u003Cparent\u003E\n++++\u003CgroupId\u003Eorg.mybatis.spring.boot\u003C\u002FgroupId\u003E\n++++\u003CartifactId\u003Emybatis-spring-boot\u003C\u002FartifactId\u003E\n++++\u003Cversion\u003E1.3.1\u003C\u002Fversion\u003E\n++\u003C\u002Fparent\u003E\n++\u003CartifactId\u003Emybatis-spring-boot-starter\u003C\u002FartifactId\u003E\n++\u003Cname\u003Emybatis-spring-boot-starter\u003C\u002Fname\u003E\n++\u003Cdependencies\u003E\n++++\u003Cdependency\u003E\n++++++\u003CgroupId\u003Eorg.springframework.boot\u003C\u002FgroupId\u003E\n++++++\u003CartifactId\u003Espring-boot-starter\u003C\u002FartifactId\u003E\n++++\u003C\u002Fdependency\u003E\n++++\u003Cdependency\u003E\n++++++\u003CgroupId\u003Eorg.springframework.boot\u003C\u002FgroupId\u003E\n++++++\u003CartifactId\u003Espring-boot-starter-jdbc\u003C\u002FartifactId\u003E\n++++\u003C\u002Fdependency\u003E\n++++\u003Cdependency\u003E\n++++++\u003CgroupId\u003Eorg.mybatis.spring.boot\u003C\u002FgroupId\u003E\n++++++\u003CartifactId\u003Emybatis-spring-boot-autoconfigure\u003C\u002FartifactId\u003E\n++++\u003C\u002Fdependency\u003E\n++++\u003Cdependency\u003E\n++++++\u003CgroupId\u003Eorg.mybatis\u003C\u002FgroupId\u003E\n++++++\u003CartifactId\u003Emybatis\u003C\u002FartifactId\u003E\n++++\u003C\u002Fdependency\u003E\n++++\u003Cdependency\u003E\n++++++\u003CgroupId\u003Eorg.mybatis\u003C\u002FgroupId\u003E\n++++++\u003CartifactId\u003Emybatis-spring\u003C\u002FartifactId\u003E\n++++\u003C\u002Fdependency\u003E\n++\u003C\u002Fdependencies\u003E\n\u003C\u002Fproject\u003E\n|code-block|syntax|javascript|domfu|从上面可以看出，pom.xml文件中会引入一些jar包，其中除了引入spring-boot-starter，之外重点看一下：mybatis-spring-boot-autoconfigure|a8oe4|我们找到mybatis-spring-boot-autoconfigure.jar文件，打开这个文件|fd8de|1g501|里面包含如下文件：|74pl8|pom.properties++配置maven所需的项目version、groupId和artifactId|1r691|pom.xml++配置所依赖的jar包|bbgd7|additional-spring-configuration-metadata.json++手动添加IDE提示功能\n|5u9hl|MANIFEST.MF+这个文件描述了该Jar文件的很多信息\n|c6bv6|spring.factories+SPI会读取的文件\n|bkefu|spring-configuration-metadata.json+系统自动生成的IDE提示功能\n|46joe|ConfigurationCustomizer+自定义Configuration回调接口\n|2119v|MybatisAutoConfiguration+mybatis配置类\n|2bajv|MybatisProperties+mybatis属性类\n|7tkvq|SpringBootVFS+扫描嵌套的jar包中的类\n|41lg0|spring-configuration-metadata.json+和+additional-spring-configuration-metadata.json+的功能差不多，我们再applicationContext.properties文件中输入spring时，会自动出现下面的配置信息可供选择，就是这个功能了。|4qgdb|a2er2|区别：|6t9p2|如果pom.xml中引入了spring-boot-configuration-processor包，则会自动生成spring-configuration-metadata.json。如果需要手动修改里面的元数据，则可以在additional-spring-configuration-metadata.json中编辑，最终两个文件中的元数据会合并到一起。|dvice|MybatisProperties类是属性实体类|1ti1f|@ConfigurationProperties(prefix+=+MybatisProperties.MYBATIS_PREFIX)\npublic+class+MybatisProperties+{\n\n++public+static+final+String+MYBATIS_PREFIX+=+\"mybatis\";\n\n++private+String+configLocation;\n++private+String[]+mapperLocations;\n++private+String+typeAliasesPackage;\n++private+String+typeHandlersPackage;\n++private+boolean+checkConfigLocation+=+false;\n++private+ExecutorType+executorType;\n++private+Properties+configurationProperties;\n++@NestedConfigurationProperty\n++private+Configuration+configuration;\n\n++\u002F**\n+++*+@since+1.1.0\n+++*\u002F\n++public+String+getConfigLocation()+{\n++++return+this.configLocation;\n++}\n\n++\u002F**\n+++*+@since+1.1.0\n+++*\u002F\n++public+void+setConfigLocation(String+configLocation)+{\n++++this.configLocation+=+configLocation;\n++}\n\n++@Deprecated\n++public+String+getConfig()+{\n++++return+this.configLocation;\n++}\n\n++@Deprecated\n++public+void+setConfig(String+config)+{\n++++this.configLocation+=+config;\n++}\n\n++public+String[]+getMapperLocations()+{\n++++return+this.mapperLocations;\n++}\n\n++public+void+setMapperLocations(String[]+mapperLocations)+{\n++++this.mapperLocations+=+mapperLocations;\n++}\n\n++public+String+getTypeHandlersPackage()+{\n++++return+this.typeHandlersPackage;\n++}\n\n++public+void+setTypeHandlersPackage(String+typeHandlersPackage)+{\n++++this.typeHandlersPackage+=+typeHandlersPackage;\n++}\n\n++public+String+getTypeAliasesPackage()+{\n++++return+this.typeAliasesPackage;\n++}\n\n++public+void+setTypeAliasesPackage(String+typeAliasesPackage)+{\n++++this.typeAliasesPackage+=+typeAliasesPackage;\n++}\n\n++public+boolean+isCheckConfigLocation()+{\n++++return+this.checkConfigLocation;\n++}\n\n++public+void+setCheckConfigLocation(boolean+checkConfigLocation)+{\n++++this.checkConfigLocation+=+checkConfigLocation;\n++}\n\n++public+ExecutorType+getExecutorType()+{\n++++return+this.executorType;\n++}\n\n++public+void+setExecutorType(ExecutorType+executorType)+{\n++++this.executorType+=+executorType;\n++}\n\n++\u002F**\n+++*+@since+1.2.0\n+++*\u002F\n++public+Properties+getConfigurationProperties()+{\n++++return+configurationProperties;\n++}\n\n++\u002F**\n+++*+@since+1.2.0\n+++*\u002F\n++public+void+setConfigurationProperties(Properties+configurationProperties)+{\n++++this.configurationProperties+=+configurationProperties;\n++}\n\n++public+Configuration+getConfiguration()+{\n++++return+configuration;\n++}\n\n++public+void+setConfiguration(Configuration+configuration)+{\n++++this.configuration+=+configuration;\n++}\n\n++public+Resource[]+resolveMapperLocations()+{\n++++ResourcePatternResolver+resourceResolver+=+new+PathMatchingResourcePatternResolver();\n++++List\u003CResource\u003E+resources+=+new+ArrayList\u003CResource\u003E();\n++++if+(this.mapperLocations+!=+null)+{\n++++++for+(String+mapperLocation+:+this.mapperLocations)+{\n++++++++try+{\n++++++++++Resource[]+mappers+=+resourceResolver.getResources(mapperLocation);\n++++++++++resources.addAll(Arrays.asList(mappers));\n++++++++}+catch+(IOException+e)+{\n++++++++++\u002F\u002F+ignore\n++++++++}\n++++++}\n++++}\n++++return+resources.toArray(new+Resource[resources.size()]);\n++}\n}\n|2omve|可以看到mybatis初始化所需要的很多属性都在这里，相当于一个javabean。\n|804u5|下面重点看一下MybatisAutoConfiguration|bp16|@org.springframework.context.annotation.Configuration\n@ConditionalOnClass({+SqlSessionFactory.class,+SqlSessionFactoryBean.class+})\n@ConditionalOnBean(DataSource.class)\n@EnableConfigurationProperties(MybatisProperties.class)\n@AutoConfigureAfter(DataSourceAutoConfiguration.class)\npublic+class+MybatisAutoConfiguration+{\n\n++private+static+final+Logger+logger+=+LoggerFactory.getLogger(MybatisAutoConfiguration.class);\n\n++private+final+MybatisProperties+properties;\n\n++private+final+Interceptor[]+interceptors;\n\n++private+final+ResourceLoader+resourceLoader;\n\n++private+final+DatabaseIdProvider+databaseIdProvider;\n\n++private+final+List\u003CConfigurationCustomizer\u003E+configurationCustomizers;\n\n++public+MybatisAutoConfiguration(MybatisProperties+properties,\n++++++++++++++++++++++++++++++++++ObjectProvider\u003CInterceptor[]\u003E+interceptorsProvider,\n++++++++++++++++++++++++++++++++++ResourceLoader+resourceLoader,\n++++++++++++++++++++++++++++++++++ObjectProvider\u003CDatabaseIdProvider\u003E+databaseIdProvider,\n++++++++++++++++++++++++++++++++++ObjectProvider\u003CList\u003CConfigurationCustomizer\u003E\u003E+configurationCustomizersProvider)+{\n++++this.properties+=+properties;\n++++this.interceptors+=+interceptorsProvider.getIfAvailable();\n++++this.resourceLoader+=+resourceLoader;\n++++this.databaseIdProvider+=+databaseIdProvider.getIfAvailable();\n++++this.configurationCustomizers+=+configurationCustomizersProvider.getIfAvailable();\n++}\n\n++@PostConstruct\n++public+void+checkConfigFileExists()+{\n++++if+(this.properties.isCheckConfigLocation()+&&+StringUtils.hasText(this.properties.getConfigLocation()))+{\n++++++Resource+resource+=+this.resourceLoader.getResource(this.properties.getConfigLocation());\n++++++Assert.state(resource.exists(),+\"Cannot+find+config+location:+\"+%2B+resource\n++++++++++%2B+\"+(please+add+config+file+or+check+your+Mybatis+configuration)\");\n++++}\n++}\n\n++@Bean\n++@ConditionalOnMissingBean\n++public+SqlSessionFactory+sqlSessionFactory(DataSource+dataSource)+throws+Exception+{\n++++SqlSessionFactoryBean+factory+=+new+SqlSessionFactoryBean();\n++++factory.setDataSource(dataSource);\n++++factory.setVfs(SpringBootVFS.class);\n++++if+(StringUtils.hasText(this.properties.getConfigLocation()))+{\n++++++factory.setConfigLocation(this.resourceLoader.getResource(this.properties.getConfigLocation()));\n++++}\n++++Configuration+configuration+=+this.properties.getConfiguration();\n++++if+(configuration+==+null+&&+!StringUtils.hasText(this.properties.getConfigLocation()))+{\n++++++configuration+=+new+Configuration();\n++++}\n++++if+(configuration+!=+null+&&+!CollectionUtils.isEmpty(this.configurationCustomizers))+{\n++++++for+(ConfigurationCustomizer+customizer+:+this.configurationCustomizers)+{\n++++++++customizer.customize(configuration);\n++++++}\n++++}\n++++factory.setConfiguration(configuration);\n++++if+(this.properties.getConfigurationProperties()+!=+null)+{\n++++++factory.setConfigurationProperties(this.properties.getConfigurationProperties());\n++++}\n++++if+(!ObjectUtils.isEmpty(this.interceptors))+{\n++++++factory.setPlugins(this.interceptors);\n++++}\n++++if+(this.databaseIdProvider+!=+null)+{\n++++++factory.setDatabaseIdProvider(this.databaseIdProvider);\n++++}\n++++if+(StringUtils.hasLength(this.properties.getTypeAliasesPackage()))+{\n++++++factory.setTypeAliasesPackage(this.properties.getTypeAliasesPackage());\n++++}\n++++if+(StringUtils.hasLength(this.properties.getTypeHandlersPackage()))+{\n++++++factory.setTypeHandlersPackage(this.properties.getTypeHandlersPackage());\n++++}\n++++if+(!ObjectUtils.isEmpty(this.properties.resolveMapperLocations()))+{\n++++++factory.setMapperLocations(this.properties.resolveMapperLocations());\n++++}\n\n++++return+factory.getObject();\n++}\n\n++@Bean\n++@ConditionalOnMissingBean\n++public+SqlSessionTemplate+sqlSessionTemplate(SqlSessionFactory+sqlSessionFactory)+{\n++++ExecutorType+executorType+=+this.properties.getExecutorType();\n++++if+(executorType+!=+null)+{\n++++++return+new+SqlSessionTemplate(sqlSessionFactory,+executorType);\n++++}+else+{\n++++++return+new+SqlSessionTemplate(sqlSessionFactory);\n++++}\n++}\n\n++public+static+class+AutoConfiguredMapperScannerRegistrar\n++++++implements+BeanFactoryAware,+ImportBeanDefinitionRegistrar,+ResourceLoaderAware+{\n\n++++private+BeanFactory+beanFactory;\n\n++++private+ResourceLoader+resourceLoader;\n\n++++@Override\n++++public+void+registerBeanDefinitions(AnnotationMetadata+importingClassMetadata,+BeanDefinitionRegistry+registry)+{\n\n++++++ClassPathMapperScanner+scanner+=+new+ClassPathMapperScanner(registry);\n\n++++++try+{\n++++++++if+(this.resourceLoader+!=+null)+{\n++++++++++scanner.setResourceLoader(this.resourceLoader);\n++++++++}\n\n++++++++List\u003CString\u003E+packages+=+AutoConfigurationPackages.get(this.beanFactory);\n++++++++if+(logger.isDebugEnabled())+{\n++++++++++for+(String+pkg+:+packages)+{\n++++++++++++logger.debug(\"Using+auto-configuration+base+package+'{}'\",+pkg);\n++++++++++}\n++++++++}\n\n++++++++scanner.setAnnotationClass(Mapper.class);\n++++++++scanner.registerFilters();\n++++++++scanner.doScan(StringUtils.toStringArray(packages));\n++++++}+catch+(IllegalStateException+ex)+{\n++++++++logger.debug(\"Could+not+determine+auto-configuration+package,+automatic+mapper+scanning+disabled.\",+ex);\n++++++}\n++++}\n\n++++@Override\n++++public+void+setBeanFactory(BeanFactory+beanFactory)+throws+BeansException+{\n++++++this.beanFactory+=+beanFactory;\n++++}\n\n++++@Override\n++++public+void+setResourceLoader(ResourceLoader+resourceLoader)+{\n++++++this.resourceLoader+=+resourceLoader;\n++++}\n++}\n\n++@org.springframework.context.annotation.Configuration\n++@Import({+AutoConfiguredMapperScannerRegistrar.class+})\n++@ConditionalOnMissingBean(MapperFactoryBean.class)\n++public+static+class+MapperScannerRegistrarNotFoundConfiguration+{\n\n++++@PostConstruct\n++++public+void+afterPropertiesSet()+{\n++++++logger.debug(\"No+{}+found.\",+MapperFactoryBean.class.getName());\n++++}\n++}\n\n}|8q4hp|这个类就是一个Configuration（配置类），它里面定义很多bean，其中最重要的就是SqlSessionFactory的bean实例，该实例是mybatis的核心功能，用它创建SqlSession，对数据库进行CRUD操作。|kra6|除此之外，MybatisAutoConfiguration类还包含了：|880b2|@ConditionalOnClass+配置了只有包含SqlSessionFactory.class和SqlSessionFactoryBean.class，该配置类才生效\n|1kp8f|@ConditionalOnBean+配置了只有包含dataSource实例时，该配置类才生效\n|7pr5p|@EnableConfigurationProperties+该注解会自动填充MybatisProperties实例中的属性\n|ar303|AutoConfigureAfter+配置了该配置类在DataSourceAutoConfiguration类之后自动配置。|3m8va|这些注解都是一些辅助功能，决定Configuration是否生效，当然这些注解不是必须的。|8t3da|接下来，重点看看spring.factories文件有啥内容|dslfk|org.springframework.boot.autoconfigure.EnableAutoConfiguration=\\\norg.mybatis.spring.boot.autoconfigure.MybatisAutoConfiguration|ehvs4|里面只有一行配置，即key为EnableAutoConfiguration，value为MybatisAutoConfiguration。|ba3bh|好了，介绍了这么多东西，现在我们来总结一下，|4m7jn|starter几个要素如下图所示：|1tl27|ahl10|编写starter需要哪些步骤：|7247o|1.需要定义一个名称为xxx-spring-boot-starter的空项目，里面不包含任何代码，可以有pom.xml和pom.properties文件。|dlebj|2.pom.xml文件中包含了名称为xxx-spring-boot-autoconfigure的项目|83a1|3.xxx-spring-boot-autoconfigure项目中包含了名称为xxxAutoConfiguration的类，该类可以定义一些bean实例。当然，Configuration类上可以打一些如：ConditionalOnClass、ConditionalOnBean、EnableConfigurationProperties等注解。|4kg65|4.需要在spring.factories文件中增加key为EnableAutoConfiguration，value为|ed1ut|xxxAutoConfiguration。|be552|我们试着按照这四步，自己编写一个starter看看能否成功，验证一下总结的内容是否正确。|b2ckf|三、编写自己的starter|72b7h|先创建一个空项目\n\n\n该项目名称为id-generate-starter，注意为了方便我把项目重命名了，原本应该是叫id-generate-spring-boot-starter的，如下图所示\n|ordered-list-item|d6bu8|5o3ut|\npom.xml文件定义如下：|ge0l|\u003C?xml+version=\"1.0\"+encoding=\"UTF-8\"?\u003E\n\n\u003Cproject+xmlns=\"http:\u002F\u002Fmaven.apache.org\u002FPOM\u002F4.0.0\"+xmlns:xsi=\"http:\u002F\u002Fwww.w3.org\u002F2001\u002FXMLSchema-instance\"+xsi:schemaLocation=\"http:\u002F\u002Fmaven.apache.org\u002FPOM\u002F4.0.0+http:\u002F\u002Fmaven.apache.org\u002Fxsd\u002Fmaven-4.0.0.xsd\"\u003E\n++++\u003CmodelVersion\u003E4.0.0\u003C\u002FmodelVersion\u003E\n\n++++\u003Cversion\u003E1.3.1\u003C\u002Fversion\u003E\n++++\u003CgroupId\u003Ecom.sue\u003C\u002FgroupId\u003E\n++++\u003CartifactId\u003Eid-generate-spring-boot-starter\u003C\u002FartifactId\u003E\n++++\u003Cname\u003Eid-generate-spring-boot-starter\u003C\u002Fname\u003E\n++++\u003Cdependencies\u003E\n++++++++\u003Cdependency\u003E\n++++++++++++\u003CgroupId\u003Ecom.sue\u003C\u002FgroupId\u003E\n++++++++++++\u003CartifactId\u003Eid-generate-spring-boot-autoconfigure\u003C\u002FartifactId\u003E\n++++++++++++\u003Cversion\u003E1.3.1\u003C\u002Fversion\u003E\n++++++++\u003C\u002Fdependency\u003E\n++++\u003C\u002Fdependencies\u003E\n\u003C\u002Fproject\u003E|2ln1q|我们看到，它只引入了id-generate-spring-boot-autoconfigure。当然如果有需要这里还可以引入多个autoconfigure或者多个其他jar包或者。|jq75|2.创建一个名称为id-generate-autoconfigure的项目|4ijam|同样为了方便我把项目重命名了，原本是叫id-generate-spring-boot-autoconfigure，如下图所示：|1i8fr|43jo4|该项目当中包含：pom.xml、spring.factories、IdGenerateAutoConfiguration、IdGenerateService+和+IdProperties+这5个关键文件，下面我们逐一看看。|3qsq3|先从pom.xml|eghl1|\u003C?xml+version=\"1.0\"+encoding=\"UTF-8\"?\u003E\n\n\u003Cproject+xmlns=\"http:\u002F\u002Fmaven.apache.org\u002FPOM\u002F4.0.0\"+xmlns:xsi=\"http:\u002F\u002Fwww.w3.org\u002F2001\u002FXMLSchema-instance\"+xsi:schemaLocation=\"http:\u002F\u002Fmaven.apache.org\u002FPOM\u002F4.0.0+http:\u002F\u002Fmaven.apache.org\u002Fxsd\u002Fmaven-4.0.0.xsd\"\u003E\n\n++++\u003Cparent\u003E\n++++++++\u003CgroupId\u003Eorg.springframework.boot\u003C\u002FgroupId\u003E\n++++++++\u003CartifactId\u003Espring-boot-starter-parent\u003C\u002FartifactId\u003E\n++++++++\u003Cversion\u003E2.0.4.RELEASE\u003C\u002Fversion\u003E\n++++\u003C\u002Fparent\u003E\n++++\u003CmodelVersion\u003E4.0.0\u003C\u002FmodelVersion\u003E\n\n++++\u003Cversion\u003E1.3.1\u003C\u002Fversion\u003E\n++++\u003CgroupId\u003Ecom.sue\u003C\u002FgroupId\u003E\n++++\u003CartifactId\u003Eid-generate-spring-boot-autoconfigure\u003C\u002FartifactId\u003E\n++++\u003Cname\u003Eid-generate-spring-boot-autoconfigure\u003C\u002Fname\u003E\n\n\n++++\u003Cdependencies\u003E\n\n++++++++\u003Cdependency\u003E\n++++++++++++\u003CgroupId\u003Eorg.springframework.boot\u003C\u002FgroupId\u003E\n++++++++++++\u003CartifactId\u003Espring-boot-starter\u003C\u002FartifactId\u003E\n++++++++\u003C\u002Fdependency\u003E\n\n++++++++\u003C!--+Compile+dependencies+--\u003E\n++++++++\u003Cdependency\u003E\n++++++++++++\u003CgroupId\u003Eorg.springframework.boot\u003C\u002FgroupId\u003E\n++++++++++++\u003CartifactId\u003Espring-boot-autoconfigure\u003C\u002FartifactId\u003E\n++++++++\u003C\u002Fdependency\u003E\n\n\n++++++++\u003C!--+@ConfigurationProperties+annotation+processing+(metadata+for+IDEs)+--\u003E\n++++++++\u003Cdependency\u003E\n++++++++++++\u003CgroupId\u003Eorg.springframework.boot\u003C\u002FgroupId\u003E\n++++++++++++\u003CartifactId\u003Espring-boot-configuration-processor\u003C\u002FartifactId\u003E\n++++++++++++\u003Coptional\u003Etrue\u003C\u002Foptional\u003E\n++++++++\u003C\u002Fdependency\u003E\n++++\u003C\u002Fdependencies\u003E\n\n\n++++\u003Cbuild\u003E\n++++++++\u003Cplugins\u003E\n++++++++++++\u003Cplugin\u003E\n++++++++++++++++\u003CgroupId\u003Eorg.apache.maven.plugins\u003C\u002FgroupId\u003E\n++++++++++++++++\u003CartifactId\u003Emaven-compiler-plugin\u003C\u002FartifactId\u003E\n++++++++++++++++\u003Cconfiguration\u003E\n++++++++++++++++++++\u003Csource\u003E1.8\u003C\u002Fsource\u003E\n++++++++++++++++++++\u003Ctarget\u003E1.8\u003C\u002Ftarget\u003E\n++++++++++++++++\u003C\u002Fconfiguration\u003E\n++++++++++++\u003C\u002Fplugin\u003E\n++++++++\u003C\u002Fplugins\u003E\n++++\u003C\u002Fbuild\u003E\n\u003C\u002Fproject\u003E\n|9g6q7|我们可以看到，这个文件比较简单就引入了：|1m8i1|spring-boot-starter++++springboot的相关jar包\n\n|cag64|spring-boot-autoconfigure++++springboot自动配置相关jar包\n\n|685mi|spring-boot-configuration-processor++springboot生成IDE提示功能相关jar包|83r37|重点看看spring.factories文件|3vfdm|org.springframework.boot.autoconfigure.EnableAutoConfiguration=com.sue.IdGenerateAutoConfiguration|9vgu9|它里面只包含一行配置，其中key是EnableAutoConfiguration，value是IdGenerateAutoConfiguration。|d1e0e|再重点看一下IdGenerateAutoConfiguration|d8jkq|@ConditionalOnClass(IdProperties.class)\n@EnableConfigurationProperties(IdProperties.class)\n@Configuration\npublic+class+IdGenerateAutoConfiguration+{\n\n++++@Autowired\n++++private+IdProperties+properties;\n\n++++@Bean\n++++public+IdGenerateService+idGenerateService()+{\n++++++++return+new+IdGenerateService(properties.getWorkId());\n++++}\n}|7ehuq|该类是一个使用了@Configuration注解标记为了配置类，生效的条件是@ConditionalOnClass注解中检测到包含IdProperties.class。并且使用@EnableConfigurationProperties注解会自动注入IdProperties的实例。|1pgsn|此外，最关键的点是该类里面创建了idGenerateService的bean实例，这是自动配置的精髓。|fnvil|再看看IdGenerateService|5r3f5|public+class+IdGenerateService+{\n\n++++private+Long+workId;\n\n++++public+IdGenerateService(Long+workId)+{\n++++++++this.workId+=+workId;\n++++}\n\n\n++++public+Long+generate()+{\n++++++++return+new+Random().nextInt(100)+%2B+this.workId;\n++++}\n}|cjmol|我们可以看到它是一个普通的类，甚至都没有使用@Service注解，里面有个generate方法，根据workId的值和随机数动态生成id。|1p6gu|最后看看IdProperties|37v93|@ConfigurationProperties(prefix+=+IdProperties.PREFIX)\npublic+class+IdProperties+{\n\n\n++++public+static+final+String+PREFIX+=+\"sue\";\n\n++++private+Long+workId;\n\n++++public+Long+getWorkId()+{\n++++++++return+workId;\n++++}\n\n++++public+void+setWorkId(Long+workId)+{\n++++++++this.workId+=+workId;\n++++}\n}|1j6mb|它是一个配置实体类，里面包含了相关的配置文件。使用@ConfigurationProperties注解，会自动把application.properties文件中以sue开通的，参数名称跟IdProperties中一样的参数值，自动注入到IdProperties对象中。|6fsf5|3.创建一个名称为id-generate-test的项目|8pura|这个项目主要用于测试。|bi57u|f6sou|该项目里面包含：pom.xml、application.properties、Application+和+TestRunner+文件。|6iug0|先看看pom.xml文件\n|4nska|\u003C?xml+version=\"1.0\"+encoding=\"UTF-8\"?\u003E\n\n\u003Cproject+xmlns=\"http:\u002F\u002Fmaven.apache.org\u002FPOM\u002F4.0.0\"+xmlns:xsi=\"http:\u002F\u002Fwww.w3.org\u002F2001\u002FXMLSchema-instance\"+xsi:schemaLocation=\"http:\u002F\u002Fmaven.apache.org\u002FPOM\u002F4.0.0+http:\u002F\u002Fmaven.apache.org\u002Fxsd\u002Fmaven-4.0.0.xsd\"\u003E\n\n++++\u003CmodelVersion\u003E4.0.0\u003C\u002FmodelVersion\u003E\n\n++++\u003Cversion\u003E1.3.1\u003C\u002Fversion\u003E\n++++\u003CgroupId\u003Ecom.sue\u003C\u002FgroupId\u003E\n++++\u003CartifactId\u003Espring-boot-id-generate-test\u003C\u002FartifactId\u003E\n++++\u003Cname\u003Espring-boot-id-generate-test\u003C\u002Fname\u003E\n\n\n++++\u003Cdependencies\u003E\n\n++++++++\u003Cdependency\u003E\n++++++++++++\u003CgroupId\u003Ecom.sue\u003C\u002FgroupId\u003E\n++++++++++++\u003CartifactId\u003Eid-generate-spring-boot-starter\u003C\u002FartifactId\u003E\n++++++++++++\u003Cversion\u003E1.3.1\u003C\u002Fversion\u003E\n++++++++\u003C\u002Fdependency\u003E\n++++\u003C\u002Fdependencies\u003E\n\u003C\u002Fproject\u003E\n|100tv|由于只测试刚刚定义的id生成功能，所以只引入的id-generate-spring-boot-starter+jar包。|efoi8|application.properties配置资源文件|18e2p|sue.workId=123|dh3pj|只有一行配置，因为我们的IdProperties中目前只需要这一个参数。|3d4n8|Application是测试程序启动类|1f0ap|@SpringBootApplication\npublic+class+Application+{\n\n++++public+static+void+main(String[]+args)+{\n++++++++SpringApplication.run(Application.class,+args);\n++++}\n}|5ps7f|很简单，就是一个普通的springboot启动类|7lns0|TestRunner是我们的测试类|3o386|@Component\npublic+class+TestRunner+implements+ApplicationRunner+{\n\n++++@Autowired\n++++private+IdGenerateService+idGenerateService;\n\n++++public+void+run(ApplicationArguments+args)+throws+Exception+{\n++++++++Long+sysNo+=+idGenerateService.generate();\n++++++++System.out.println(sysNo);\n++++}\n}|8auq7|它实现了ApplicationRunner接口，所以在springboot启动的时候会调用该类的run方法。|20vb3|好了，所有自定义starter的代码和测试代码都已经就绪。接下，运行一下Application类的main方法。|6fugt|运行结果：|4o677|\n176|4bg8d|验证成功了|kij8|接下来，我们分析一下starter的底层实现。|dc1dv|四、starter的底层实现|3ifde|通过上面编写自己的starter的例子，相信大家对starter的认识进一步加强了，现在带大家分析一下starter的底层是如何实现的。\n|8qg28|id-generate-starter.jar是一个空项目，依赖于+id-generate-autoconfiguration.jar。+id-generate-starter.jar是一个入口，或者说如果大家知道门面模式，它其实也是一个门面，其他业务系统想引入相应的功能，必须要通过这个门面。\n|e739k|我们重点分析一下+id-generate-autoconfiguration.jar|ajl8l|该jar包核心内容是：IdGenerateConfiguration，这个配置类中创建了IdGenerateService对象，IdGenerateService是我们所需要自动配置的具体功能。|33im|接下来一个最重要的问题：|be42r|IdGenerateConfiguration为什么会自动加载的呢？|7tn6a|还记得我们定义的spring.factories文件不？|b58qh|a028l|cbi4o|要搞明白这个过程，要从Application类的@SpringBootApplication注解开始。|a5lc8|@Target(ElementType.TYPE)\n@Retention(RetentionPolicy.RUNTIME)\n@Documented\n@Inherited\n@SpringBootConfiguration\n@EnableAutoConfiguration\n@ComponentScan(excludeFilters+=+{\n++++@Filter(type+=+FilterType.CUSTOM,+classes+=+TypeExcludeFilter.class),\n++++@Filter(type+=+FilterType.CUSTOM,+classes+=+AutoConfigurationExcludeFilter.class)+})\npublic+@interface+SpringBootApplication+{\n\n\n++@AliasFor(annotation+=+EnableAutoConfiguration.class)\n++Class\u003C?\u003E[]+exclude()+default+{};\n\n++@AliasFor(annotation+=+EnableAutoConfiguration.class)\n++String[]+excludeName()+default+{};\n\n++@AliasFor(annotation+=+ComponentScan.class,+attribute+=+\"basePackages\")\n++String[]+scanBasePackages()+default+{};\n\n++@AliasFor(annotation+=+ComponentScan.class,+attribute+=+\"basePackageClasses\")\n++Class\u003C?\u003E[]+scanBasePackageClasses()+default+{};\n\n}|24lce|从上面可以看出该注解里面包含了@EnableAutoConfiguration注解。|c2hen|@Target(ElementType.TYPE)\n@Retention(RetentionPolicy.RUNTIME)\n@Documented\n@Inherited\n@AutoConfigurationPackage\n@Import(AutoConfigurationImportSelector.class)\npublic+@interface+EnableAutoConfiguration+{\n\n++String+ENABLED_OVERRIDE_PROPERTY+=+\"spring.boot.enableautoconfiguration\";\n\n++Class\u003C?\u003E[]+exclude()+default+{};\n\n++String[]+excludeName()+default+{};\n\n}|7aqas|@EnableAutoConfiguration注解会引入AutoConfigurationImportSelector类。|dab1g|该类的selectImports方法一个关键方法|2b944|++@Override\n++public+String[]+selectImports(AnnotationMetadata+annotationMetadata)+{\n++++\u002F\u002F配置有没有配置spring.boot.enableautoconfiguration开关，默认为true\n++++\u002F\u002F如果为false，则不执行自动配置的功能，直接返回\n++++if+(!isEnabled(annotationMetadata))+{\n++++++return+NO_IMPORTS;\n++++}\n++++\u002F\u002F找spring-autoconfigure-metadata.properties中的元素\n++++AutoConfigurationMetadata+autoConfigurationMetadata+=+AutoConfigurationMetadataLoader\n++++++++.loadMetadata(this.beanClassLoader);\n++++\u002F\u002F获取EnableAutoConfiguration注解中的属性+\n++++AnnotationAttributes+attributes+=+getAttributes(annotationMetadata);\n++++\u002F\u002F获取工程下所有配置key为EnableAutoConfiguration的值，即IdGenerateConfiguration等类。\n++++List\u003CString\u003E+configurations+=+getCandidateConfigurations(annotationMetadata,\n++++++++attributes);\n++++\u002F\u002F删除重复的值++++\n++++configurations+=+removeDuplicates(configurations);\n++++\u002F\u002F获取需要排除的规则列表\n++++Set\u003CString\u003E+exclusions+=+getExclusions(annotationMetadata,+attributes);\n++++\u002F\u002F检查\n++++checkExcludedClasses(configurations,+exclusions);\n++++\u002F\u002F删除需要排除的值\n++++configurations.removeAll(exclusions);\n++++\u002F\u002F根据配置文件中配置的开关，过滤一部分不满足条件的值\n++++configurations+=+filter(configurations,+autoConfigurationMetadata);\n++++fireAutoConfigurationImportEvents(configurations,+exclusions);\n++++return+StringUtils.toStringArray(configurations);\n++}|79dt8|这里就是starter能够自动配置的秘密，这里我不打算深入介绍，因为我后面会分享一个专题：spring自动配置的那些秘密。\n|2l2er|此外，有些朋友看其他人定义的springboot+starter可能会有疑惑。|f4jn7|我举几个例子：|12tc5|先看看druid-spring-boot-starter|11b8r|5l8t5|alibaba定义的druid-spring-boot-starter只有xxx-spring-boot-starter.jar文件，而没有xxx-spring-boot-autoconfigure.jar文件。|5qkc1|再看看spring-boot-starter-jdbc|2vo20|a1aqo|更神奇的是这个文件中连pom.xml都没有，一脸懵逼。。。。。。。|16lg1|是不是我讲错了。\n|d4dme|其实没有。|66ul8|springboot的原则是约定优于配置。|n80v|从spring-boot-starter-jdbc内部空实现来看，它的约定是要把xxx-spring-boot-starter.jar和xxx-spring-boot-autoconfigure.jar区分开的。个人认为，alibaba定义得并不好，没有遵照springboot的约定，虽然功能不受影响。|bg2s3|而springboot自己定义的spring-boot-starter-jdbc为什么连pom.xml文件也没有呢？|4f4ih|它不需要依赖xxx-spring-boot-autoconfigure.jar文件吗？|cucn9|因为，springboot把所有的自动配置的类都统一放到spring-boot-autoconfigure+jar包下面了|7rqr|af1i5|9q5br|springboot这样集中管理自动配置，而不需要从各个子包中遍历，我个人认为是为了查找效率。|auvb6|我们最后再看看spring-cloud-starter-openfegin\n|aftje|apmc6|明显看到，它是遵循了我们说的原则的。\n|e52bd|除此之外，还有一个原则一起提一下。|1fgpv|springboot和springcloud系列定义jar包的名称是+:|fp5fd|spring-boot-starter-xxx.jar|fd3cm|spring-cloud-starter-xxx.jar|5fr94|而我们自己的项目定义的jar应该是：|739r0|xxx-spring-boot-starter.jar|958on|欢迎朋友们关注我的公众账号：苏三说技术，如果大家有一些问题可以给我留言。谢谢大家。|5475f|18ifg^0|5|Q|5|Q|13|A|1S|A|5|Q|0|0|5|A|H|7|0|0|0|0|0|0|E|0|0|2T|0|0|0|0|0|K|5|Q|6|X|9|1B|7|0|2G|5|2O|7|2Y|8|39|5|0|0|1C|0|0|2C|0|0|X|0|0|E|0|8|V|0|0|1|1|0|0|0|0|0|0|0|C|0|0|0|Y|J|1Q|X|0|4|11|0|0|1|2|0|0|0|0|0|0|0|0|0|0|0|0|0|Z|11|19|0|0|1|3|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|1|4|0|0|0|25|0|0|1E|0|0|4T|0|0|1O|0|0|L|0|0|0|E|0|0|8|0|0|1|5|0|0|0|0|0|11|0|0|0|1|6|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|S|0|0|0|1|7|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|E|0|0|0|0|0|0|C|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|1|8|0|0|0|0|1|9|0|0|0|0|0|L|0|0|0|0|0|0|1|A|0|0|1|B|0|0|0|0|1|C|0|0|0|0|0|0|0|0|0|0^^$0|$1|$2|3|4|5|6|$7|8]]|9|$2|A|4|B|6|$C|D|E|-4]]|F|$2|A|4|B|6|$C|G|E|-4]]|H|$2|A|4|B|6|$C|I|E|-4]]|J|$2|A|4|B|6|$C|K|E|-4]]|L|$2|A|4|B|6|$C|M|E|-4]]|N|$2|A|4|B|6|$C|O|E|-4]]|P|$2|A|4|B|6|$C|Q|E|-4]]|R|$2|A|4|B|6|$C|S|E|-4]]|T|$2|A|4|B|6|$C|U|E|-4]]|V|$2|A|4|B|6|$C|W|E|-4]]|X|$2|A|4|B|6|$C|Y|E|-4]]|Z|$2|A|4|B|6|$C|10|E|-4]]]|11|@$12|13|14|15|2|16|17|AL|18|@$19|AM|1A|AN|1B|1C]|$19|AO|1A|AP|1B|1D]|$19|AQ|1A|AR|1B|1E]|$19|AS|1A|AT|1B|1E]]|1F|@$19|AU|1A|AV|12|AW]]|6|$]]|$12|1G|14|1H|2|16|17|AX|18|@$19|AY|1A|AZ|1B|1E]|$19|B0|1A|B1|1B|1E]]|1F|@]|6|$]]|$12|1I|14|1J|2|16|17|B2|18|@]|1F|@]|6|$]]|$12|1K|14|1L|2|16|17|B3|18|@]|1F|@]|6|$]]|$12|1M|14|1N|2|16|17|B4|18|@]|1F|@]|6|$]]|$12|1O|14|1P|2|16|17|B5|18|@]|1F|@]|6|$]]|$12|1Q|14|1R|2|1S|17|B6|18|@$19|B7|1A|B8|1B|1D]]|1F|@]|6|$]]|$12|1T|14|1U|2|1V|17|B9|18|@$19|BA|1A|BB|1B|1D]]|1F|@]|6|$]]|$12|1W|14|1X|2|16|17|BC|18|@]|1F|@]|6|$]]|$12|1Y|14|1Z|2|16|17|BD|18|@]|1F|@]|6|$]]|$12|20|14|21|2|16|17|BE|18|@]|1F|@]|6|$]]|$12|22|14|23|2|16|17|BF|18|@]|1F|@]|6|$]]|$12|24|14|25|2|16|17|BG|18|@$19|BH|1A|BI|1B|1E]|$19|BJ|1A|BK|1B|1E]|$19|BL|1A|BM|1B|1E]|$19|BN|1A|BO|1B|1E]]|1F|@]|6|$]]|$12|26|14|27|2|16|17|BP|18|@$19|BQ|1A|BR|1B|1E]|$19|BS|1A|BT|1B|1E]|$19|BU|1A|BV|1B|1E]|$19|BW|1A|BX|1B|1E]]|1F|@]|6|$]]|$12|28|14|29|2|16|17|BY|18|@$19|BZ|1A|C0|1B|1D]]|1F|@]|6|$]]|$12|2A|14|2B|2|16|17|C1|18|@$19|C2|1A|C3|1B|1D]]|1F|@]|6|$]]|$12|2C|14|2D|2|16|17|C4|18|@$19|C5|1A|C6|1B|1D]]|1F|@]|6|$]]|$12|2E|14|2F|2|1S|17|C7|18|@$19|C8|1A|C9|1B|1D]]|1F|@]|6|$]]|$12|2G|14|2H|2|16|17|CA|18|@$19|CB|1A|CC|1B|1E]]|1F|@]|6|$]]|$12|2I|14|2J|2|2K|17|CD|18|@]|1F|@$19|CE|1A|CF|12|CG]]|6|$]]|$12|2L|14|2M|2|16|17|CH|18|@]|1F|@]|6|$]]|$12|2N|14|2O|2|2P|17|CI|18|@]|1F|@]|6|$]]|$12|2Q|14|2R|2|2P|17|CJ|18|@]|1F|@]|6|$]]|$12|2S|14|2T|2|2P|17|CK|18|@]|1F|@]|6|$]]|$12|2U|14|2V|2|2P|17|CL|18|@]|1F|@]|6|$]]|$12|2W|14|2X|2|16|17|CM|18|@$19|CN|1A|CO|1B|1D]]|1F|@]|6|$]]|$12|2Y|14|2Z|2|16|17|CP|18|@]|1F|@]|6|$]]|$12|30|14|31|2|32|17|CQ|18|@]|1F|@]|6|$33|34]]|$12|35|14|36|2|16|17|CR|18|@$19|CS|1A|CT|1B|1D]|$19|CU|1A|CV|1B|1D]]|1F|@]|6|$]]|$12|37|14|38|2|16|17|CW|18|@$19|CX|1A|CY|1B|1D]]|1F|@]|6|$]]|$12|39|14|2J|2|2K|17|CZ|18|@]|1F|@$19|D0|1A|D1|12|D2]]|6|$]]|$12|3A|14|3B|2|16|17|D3|18|@]|1F|@]|6|$]]|$12|3C|14|3D|2|2P|17|D4|18|@]|1F|@]|6|$]]|$12|3E|14|3F|2|2P|17|D5|18|@]|1F|@]|6|$]]|$12|3G|14|3H|2|2P|17|D6|18|@]|1F|@]|6|$]]|$12|3I|14|3J|2|2P|17|D7|18|@]|1F|@]|6|$]]|$12|3K|14|3L|2|2P|17|D8|18|@]|1F|@]|6|$]]|$12|3M|14|3N|2|2P|17|D9|18|@]|1F|@]|6|$]]|$12|3O|14|3P|2|2P|17|DA|18|@]|1F|@]|6|$]]|$12|3Q|14|3R|2|2P|17|DB|18|@]|1F|@]|6|$]]|$12|3S|14|3T|2|2P|17|DC|18|@]|1F|@]|6|$]]|$12|3U|14|3V|2|2P|17|DD|18|@]|1F|@]|6|$]]|$12|3W|14|3X|2|16|17|DE|18|@$19|DF|1A|DG|1B|1D]|$19|DH|1A|DI|1B|1D]]|1F|@]|6|$]]|$12|3Y|14|2J|2|2K|17|DJ|18|@]|1F|@$19|DK|1A|DL|12|DM]]|6|$]]|$12|3Z|14|40|2|16|17|DN|18|@]|1F|@]|6|$]]|$12|41|14|42|2|16|17|DO|18|@]|1F|@]|6|$]]|$12|43|14|44|2|16|17|DP|18|@]|1F|@]|6|$]]|$12|45|14|46|2|32|17|DQ|18|@]|1F|@]|6|$33|34]]|$12|47|14|48|2|16|17|DR|18|@]|1F|@]|6|$]]|$12|49|14|4A|2|16|17|DS|18|@]|1F|@]|6|$]]|$12|4B|14|4C|2|32|17|DT|18|@]|1F|@]|6|$33|34]]|$12|4D|14|4E|2|16|17|DU|18|@]|1F|@]|6|$]]|$12|4F|14|4G|2|16|17|DV|18|@]|1F|@]|6|$]]|$12|4H|14|4I|2|2P|17|DW|18|@]|1F|@]|6|$]]|$12|4J|14|4K|2|2P|17|DX|18|@]|1F|@]|6|$]]|$12|4L|14|4M|2|2P|17|DY|18|@]|1F|@]|6|$]]|$12|4N|14|4O|2|2P|17|DZ|18|@]|1F|@]|6|$]]|$12|4P|14|4Q|2|16|17|E0|18|@]|1F|@]|6|$]]|$12|4R|14|4S|2|16|17|E1|18|@]|1F|@]|6|$]]|$12|4T|14|4U|2|32|17|E2|18|@]|1F|@]|6|$33|34]]|$12|4V|14|4W|2|16|17|E3|18|@]|1F|@]|6|$]]|$12|4X|14|4Y|2|16|17|E4|18|@]|1F|@]|6|$]]|$12|4Z|14|50|2|16|17|E5|18|@]|1F|@]|6|$]]|$12|51|14|2J|2|2K|17|E6|18|@]|1F|@$19|E7|1A|E8|12|E9]]|6|$]]|$12|52|14|53|2|16|17|EA|18|@]|1F|@]|6|$]]|$12|54|14|55|2|16|17|EB|18|@$19|EC|1A|ED|1B|1D]]|1F|@]|6|$]]|$12|56|14|57|2|16|17|EE|18|@$19|EF|1A|EG|1B|1D]]|1F|@]|6|$]]|$12|58|14|59|2|16|17|EH|18|@$19|EI|1A|EJ|1B|1D]]|1F|@]|6|$]]|$12|5A|14|5B|2|16|17|EK|18|@$19|EL|1A|EM|1B|1D]]|1F|@]|6|$]]|$12|5C|14|5D|2|16|17|EN|18|@$19|EO|1A|EP|1B|1D]]|1F|@]|6|$]]|$12|5E|14|5F|2|16|17|EQ|18|@]|1F|@]|6|$]]|$12|5G|14|5H|2|1S|17|ER|18|@$19|ES|1A|ET|1B|1D]]|1F|@]|6|$]]|$12|5I|14|5J|2|5K|17|EU|18|@$19|EV|1A|EW|1B|1D]]|1F|@]|6|$]]|$12|5L|14|2J|2|2K|17|EX|18|@]|1F|@$19|EY|1A|EZ|12|F0]]|6|$]]|$12|5M|14|5N|2|16|17|F1|18|@]|1F|@]|6|$]]|$12|5O|14|5P|2|32|17|F2|18|@]|1F|@]|6|$33|34]]|$12|5Q|14|5R|2|16|17|F3|18|@]|1F|@]|6|$]]|$12|5S|14|5T|2|16|17|F4|18|@$19|F5|1A|F6|1B|1D]]|1F|@]|6|$]]|$12|5U|14|5V|2|16|17|F7|18|@]|1F|@]|6|$]]|$12|5W|14|2J|2|2K|17|F8|18|@]|1F|@$19|F9|1A|FA|12|FB]]|6|$]]|$12|5X|14|5Y|2|16|17|FC|18|@]|1F|@]|6|$]]|$12|5Z|14|60|2|16|17|FD|18|@]|1F|@]|6|$]]|$12|61|14|62|2|32|17|FE|18|@]|1F|@]|6|$33|34]]|$12|63|14|64|2|16|17|FF|18|@]|1F|@]|6|$]]|$12|65|14|66|2|2P|17|FG|18|@]|1F|@]|6|$]]|$12|67|14|68|2|2P|17|FH|18|@]|1F|@]|6|$]]|$12|69|14|6A|2|2P|17|FI|18|@]|1F|@]|6|$]]|$12|6B|14|6C|2|16|17|FJ|18|@]|1F|@]|6|$]]|$12|6D|14|6E|2|32|17|FK|18|@]|1F|@]|6|$33|34]]|$12|6F|14|6G|2|16|17|FL|18|@]|1F|@]|6|$]]|$12|6H|14|6I|2|16|17|FM|18|@]|1F|@]|6|$]]|$12|6J|14|6K|2|32|17|FN|18|@]|1F|@]|6|$33|34]]|$12|6L|14|6M|2|16|17|FO|18|@]|1F|@]|6|$]]|$12|6N|14|6O|2|16|17|FP|18|@]|1F|@]|6|$]]|$12|6P|14|6Q|2|16|17|FQ|18|@]|1F|@]|6|$]]|$12|6R|14|6S|2|32|17|FR|18|@]|1F|@]|6|$33|34]]|$12|6T|14|6U|2|16|17|FS|18|@]|1F|@]|6|$]]|$12|6V|14|6W|2|16|17|FT|18|@]|1F|@]|6|$]]|$12|6X|14|6Y|2|32|17|FU|18|@]|1F|@]|6|$33|34]]|$12|6Z|14|70|2|16|17|FV|18|@]|1F|@]|6|$]]|$12|71|14|72|2|16|17|FW|18|@$19|FX|1A|FY|1B|1D]]|1F|@]|6|$]]|$12|73|14|74|2|16|17|FZ|18|@]|1F|@]|6|$]]|$12|75|14|2J|2|2K|17|G0|18|@]|1F|@$19|G1|1A|G2|12|G3]]|6|$]]|$12|76|14|77|2|16|17|G4|18|@]|1F|@]|6|$]]|$12|78|14|79|2|16|17|G5|18|@]|1F|@]|6|$]]|$12|7A|14|7B|2|32|17|G6|18|@]|1F|@]|6|$33|34]]|$12|7C|14|7D|2|16|17|G7|18|@]|1F|@]|6|$]]|$12|7E|14|7F|2|16|17|G8|18|@]|1F|@]|6|$]]|$12|7G|14|7H|2|32|17|G9|18|@]|1F|@]|6|$33|34]]|$12|7I|14|7J|2|16|17|GA|18|@]|1F|@]|6|$]]|$12|7K|14|7L|2|16|17|GB|18|@]|1F|@]|6|$]]|$12|7M|14|7N|2|32|17|GC|18|@]|1F|@]|6|$33|34]]|$12|7O|14|7P|2|16|17|GD|18|@]|1F|@]|6|$]]|$12|7Q|14|7R|2|16|17|GE|18|@]|1F|@]|6|$]]|$12|7S|14|7T|2|32|17|GF|18|@]|1F|@]|6|$33|34]]|$12|7U|14|7V|2|16|17|GG|18|@]|1F|@]|6|$]]|$12|7W|14|7X|2|16|17|GH|18|@]|1F|@]|6|$]]|$12|7Y|14|7Z|2|16|17|GI|18|@]|1F|@]|6|$]]|$12|80|14|81|2|32|17|GJ|18|@]|1F|@]|6|$33|34]]|$12|82|14|83|2|16|17|GK|18|@]|1F|@]|6|$]]|$12|84|14|85|2|16|17|GL|18|@]|1F|@]|6|$]]|$12|86|14|87|2|1S|17|GM|18|@$19|GN|1A|GO|1B|1D]]|1F|@]|6|$]]|$12|88|14|89|2|16|17|GP|18|@]|1F|@]|6|$]]|$12|8A|14|8B|2|16|17|GQ|18|@]|1F|@]|6|$]]|$12|8C|14|8D|2|16|17|GR|18|@]|1F|@]|6|$]]|$12|8E|14|8F|2|16|17|GS|18|@]|1F|@]|6|$]]|$12|8G|14|8H|2|16|17|GT|18|@$19|GU|1A|GV|1B|1D]]|1F|@]|6|$]]|$12|8I|14|8J|2|16|17|GW|18|@]|1F|@]|6|$]]|$12|8K|14|8L|2|16|17|GX|18|@]|1F|@]|6|$]]|$12|8M|14|6E|2|32|17|GY|18|@]|1F|@]|6|$33|34]]|$12|8N|14|6G|2|16|17|GZ|18|@]|1F|@]|6|$]]|$12|8O|14|8P|2|16|17|H0|18|@]|1F|@]|6|$]]|$12|8Q|14|8R|2|32|17|H1|18|@]|1F|@]|6|$33|34]]|$12|8S|14|8T|2|16|17|H2|18|@]|1F|@]|6|$]]|$12|8U|14|8V|2|32|17|H3|18|@]|1F|@]|6|$33|34]]|$12|8W|14|8X|2|16|17|H4|18|@]|1F|@]|6|$]]|$12|8Y|14|8Z|2|16|17|H5|18|@]|1F|@]|6|$]]|$12|90|14|91|2|32|17|H6|18|@]|1F|@]|6|$33|34]]|$12|92|14|93|2|16|17|H7|18|@]|1F|@]|6|$]]|$12|94|14|95|2|16|17|H8|18|@]|1F|@]|6|$]]|$12|96|14|97|2|16|17|H9|18|@]|1F|@]|6|$]]|$12|98|14|99|2|16|17|HA|18|@]|1F|@]|6|$]]|$12|9A|14|2J|2|2K|17|HB|18|@]|1F|@$19|HC|1A|HD|12|HE]]|6|$]]|$12|9B|14|9C|2|16|17|HF|18|@]|1F|@]|6|$]]|$12|9D|14|9E|2|16|17|HG|18|@]|1F|@]|6|$]]|$12|9F|14|2J|2|2K|17|HH|18|@]|1F|@$19|HI|1A|HJ|12|HK]]|6|$]]|$12|9G|14|9H|2|16|17|HL|18|@]|1F|@]|6|$]]|$12|9I|14|9J|2|16|17|HM|18|@]|1F|@]|6|$]]|$12|9K|14|9L|2|16|17|HN|18|@]|1F|@]|6|$]]|$12|9M|14|9N|2|16|17|HO|18|@$19|HP|1A|HQ|1B|1D]]|1F|@]|6|$]]|$12|9O|14|9P|2|16|17|HR|18|@]|1F|@]|6|$]]|$12|9Q|14|9R|2|16|17|HS|18|@]|1F|@]|6|$]]|$12|9S|14|9T|2|16|17|HT|18|@]|1F|@]|6|$]]|$12|9U|14|9V|2|16|17|HU|18|@]|1F|@]|6|$]]|$12|9W|14|2J|2|2K|17|HV|18|@]|1F|@$19|HW|1A|HX|12|HY]]|6|$]]|$12|9X|14|2J|2|2K|17|HZ|18|@]|1F|@$19|I0|1A|I1|12|I2]]|6|$]]|$12|9Y|14|9Z|2|16|17|I3|18|@]|1F|@]|6|$]]|$12|A0|14|A1|2|16|17|I4|18|@]|1F|@]|6|$]]|$12|A2|14|2J|2|2K|17|I5|18|@]|1F|@$19|I6|1A|I7|12|I8]]|6|$]]|$12|A3|14|A4|2|16|17|I9|18|@]|1F|@]|6|$]]|$12|A5|14|A6|2|16|17|IA|18|@]|1F|@]|6|$]]|$12|A7|14|A8|2|16|17|IB|18|@]|1F|@]|6|$]]|$12|A9|14|AA|2|16|17|IC|18|@]|1F|@]|6|$]]|$12|AB|14|AC|2|16|17|ID|18|@]|1F|@]|6|$]]|$12|AD|14|AE|2|16|17|IE|18|@]|1F|@]|6|$]]|$12|AF|14|AG|2|16|17|IF|18|@]|1F|@]|6|$]]|$12|AH|14|AI|2|16|17|IG|18|@]|1F|@]|6|$]]|$12|AJ|14|-4|2|16|17|IH|18|@]|1F|@]|6|$]]|$12|AK|14|-4|2|1S|17|II|18|@]|1F|@]|6|$]]]]","plain":"继上一篇《面试时被问到单例模式，怎么回答才能让面试官眼前一亮？》之后，我打算对springboot的部分功能做一下介绍。因为现在springboot使用的人越来越多，已经成了java行业主流的框架。\n本文先介绍springboot的 starter机制，从以下方向着手：\n1.为什么要用starter\n\n2.starter的几个要素\n3.编写自己的starter\n4.starter的底层实现\n一、为什么要用starter\n在springboot还没有出来之前，我们使用spring开发项目。如果程序需要连接数据库，我们一般会使用hibernate或mybatis等ORM框架，这里我以mybatis为例，具体的操作步骤如下：\n\n1. 到maven仓库去找需要引入的mybatis jar包，选取合适的版本。\n\n2. 到maven仓库去找mybatis-spring整合的jar包，选取合适的版本。\n3. 在spring的applicationContext.xml文件中配置dataSource和mybatis相关信息。\n\n当然有些朋友可能会指正，不是还需要引入数据库驱动包吗？\n确实需要引入，但数据库驱动有很多，比如：mysql、oracle、sqlserver，这不属于mybatis的范畴，使用者可以根据项目的实际情况单独引入。\n如果程序只是需要连接数据库这一个功能还好，按上面的步骤做基本可以满足需求。但是，连接数据库可能只是庞大的项目体系中一个环节，实际项目中往往更复杂，需要引入更多的功能，比如：连接redis、连接mongodb、使用rocketmq、使用excel功能等等。\n\n引入这些功能的话，需要再把上面的步骤再重复一次，工作量无形当中增加了不少，而且有很多重复的工作。\n\n另外，还是有个问题，每次到要到maven中找合适的版本，如果哪次找的mybatis jar包 和 mybatis-spring jar包版本不兼容，程序不是会出现问题？\nspringboot为了解决以上两个问题引入了starter机制。\n\n二、starter的几个要素\n我们首先一起看看mybatis-spring-boot-starter.jar是如何定义的\n?\n可以看到它的META-INF目录下只包含了：\npom.protperties  配置maven所需的项目version、groupId和artifactId\npom.xml  配置所依赖的jar包\n\nMANIFEST.MF 这个文件描述了该Jar文件的很多信息\nspring.provides 配置所依赖的artifactId，给IDE使用的，没有其他的作用\n注意一下，没有一行代码。\n我们重点看一下pom.xml，因为这个jar包里面除了这个没有啥重要的信息\n\n\u003C?xml version=\"1.0\" encoding=\"UTF-8\"?\u003E\n\u003Cproject xmlns=\"http:\u002F\u002Fmaven.apache.org\u002FPOM\u002F4.0.0\" xmlns:xsi=\"http:\u002F\u002Fwww.w3.org\u002F2001\u002FXMLSchema-instance\" xsi:schemaLocation=\"http:\u002F\u002Fmaven.apache.org\u002FPOM\u002F4.0.0 http:\u002F\u002Fmaven.apache.org\u002Fxsd\u002Fmaven-4.0.0.xsd\"\u003E\n  \u003CmodelVersion\u003E4.0.0\u003C\u002FmodelVersion\u003E\n  \u003Cparent\u003E\n    \u003CgroupId\u003Eorg.mybatis.spring.boot\u003C\u002FgroupId\u003E\n    \u003CartifactId\u003Emybatis-spring-boot\u003C\u002FartifactId\u003E\n    \u003Cversion\u003E1.3.1\u003C\u002Fversion\u003E\n  \u003C\u002Fparent\u003E\n  \u003CartifactId\u003Emybatis-spring-boot-starter\u003C\u002FartifactId\u003E\n  \u003Cname\u003Emybatis-spring-boot-starter\u003C\u002Fname\u003E\n  \u003Cdependencies\u003E\n    \u003Cdependency\u003E\n      \u003CgroupId\u003Eorg.springframework.boot\u003C\u002FgroupId\u003E\n      \u003CartifactId\u003Espring-boot-starter\u003C\u002FartifactId\u003E\n    \u003C\u002Fdependency\u003E\n    \u003Cdependency\u003E\n      \u003CgroupId\u003Eorg.springframework.boot\u003C\u002FgroupId\u003E\n      \u003CartifactId\u003Espring-boot-starter-jdbc\u003C\u002FartifactId\u003E\n    \u003C\u002Fdependency\u003E\n    \u003Cdependency\u003E\n      \u003CgroupId\u003Eorg.mybatis.spring.boot\u003C\u002FgroupId\u003E\n      \u003CartifactId\u003Emybatis-spring-boot-autoconfigure\u003C\u002FartifactId\u003E\n    \u003C\u002Fdependency\u003E\n    \u003Cdependency\u003E\n      \u003CgroupId\u003Eorg.mybatis\u003C\u002FgroupId\u003E\n      \u003CartifactId\u003Emybatis\u003C\u002FartifactId\u003E\n    \u003C\u002Fdependency\u003E\n    \u003Cdependency\u003E\n      \u003CgroupId\u003Eorg.mybatis\u003C\u002FgroupId\u003E\n      \u003CartifactId\u003Emybatis-spring\u003C\u002FartifactId\u003E\n    \u003C\u002Fdependency\u003E\n  \u003C\u002Fdependencies\u003E\n\u003C\u002Fproject\u003E\n\n从上面可以看出，pom.xml文件中会引入一些jar包，其中除了引入spring-boot-starter，之外重点看一下：mybatis-spring-boot-autoconfigure\n我们找到mybatis-spring-boot-autoconfigure.jar文件，打开这个文件\n?\n里面包含如下文件：\npom.properties  配置maven所需的项目version、groupId和artifactId\npom.xml  配置所依赖的jar包\nadditional-spring-configuration-metadata.json  手动添加IDE提示功能\n\nMANIFEST.MF 这个文件描述了该Jar文件的很多信息\n\nspring.factories SPI会读取的文件\n\nspring-configuration-metadata.json 系统自动生成的IDE提示功能\n\nConfigurationCustomizer 自定义Configuration回调接口\n\nMybatisAutoConfiguration mybatis配置类\n\nMybatisProperties mybatis属性类\n\nSpringBootVFS 扫描嵌套的jar包中的类\n\nspring-configuration-metadata.json 和 additional-spring-configuration-metadata.json 的功能差不多，我们再applicationContext.properties文件中输入spring时，会自动出现下面的配置信息可供选择，就是这个功能了。\n?\n区别：\n如果pom.xml中引入了spring-boot-configuration-processor包，则会自动生成spring-configuration-metadata.json。如果需要手动修改里面的元数据，则可以在additional-spring-configuration-metadata.json中编辑，最终两个文件中的元数据会合并到一起。\nMybatisProperties类是属性实体类\n@ConfigurationProperties(prefix = MybatisProperties.MYBATIS_PREFIX)\npublic class MybatisProperties {\n\n  public static final String MYBATIS_PREFIX = \"mybatis\";\n\n  private String configLocation;\n  private String[] mapperLocations;\n  private String typeAliasesPackage;\n  private String typeHandlersPackage;\n  private boolean checkConfigLocation = false;\n  private ExecutorType executorType;\n  private Properties configurationProperties;\n  @NestedConfigurationProperty\n  private Configuration configuration;\n\n  \u002F**\n   * @since 1.1.0\n   *\u002F\n  public String getConfigLocation() {\n    return this.configLocation;\n  }\n\n  \u002F**\n   * @since 1.1.0\n   *\u002F\n  public void setConfigLocation(String configLocation) {\n    this.configLocation = configLocation;\n  }\n\n  @Deprecated\n  public String getConfig() {\n    return this.configLocation;\n  }\n\n  @Deprecated\n  public void setConfig(String config) {\n    this.configLocation = config;\n  }\n\n  public String[] getMapperLocations() {\n    return this.mapperLocations;\n  }\n\n  public void setMapperLocations(String[] mapperLocations) {\n    this.mapperLocations = mapperLocations;\n  }\n\n  public String getTypeHandlersPackage() {\n    return this.typeHandlersPackage;\n  }\n\n  public void setTypeHandlersPackage(String typeHandlersPackage) {\n    this.typeHandlersPackage = typeHandlersPackage;\n  }\n\n  public String getTypeAliasesPackage() {\n    return this.typeAliasesPackage;\n  }\n\n  public void setTypeAliasesPackage(String typeAliasesPackage) {\n    this.typeAliasesPackage = typeAliasesPackage;\n  }\n\n  public boolean isCheckConfigLocation() {\n    return this.checkConfigLocation;\n  }\n\n  public void setCheckConfigLocation(boolean checkConfigLocation) {\n    this.checkConfigLocation = checkConfigLocation;\n  }\n\n  public ExecutorType getExecutorType() {\n    return this.executorType;\n  }\n\n  public void setExecutorType(ExecutorType executorType) {\n    this.executorType = executorType;\n  }\n\n  \u002F**\n   * @since 1.2.0\n   *\u002F\n  public Properties getConfigurationProperties() {\n    return configurationProperties;\n  }\n\n  \u002F**\n   * @since 1.2.0\n   *\u002F\n  public void setConfigurationProperties(Properties configurationProperties) {\n    this.configurationProperties = configurationProperties;\n  }\n\n  public Configuration getConfiguration() {\n    return configuration;\n  }\n\n  public void setConfiguration(Configuration configuration) {\n    this.configuration = configuration;\n  }\n\n  public Resource[] resolveMapperLocations() {\n    ResourcePatternResolver resourceResolver = new PathMatchingResourcePatternResolver();\n    List\u003CResource\u003E resources = new ArrayList\u003CResource\u003E();\n    if (this.mapperLocations != null) {\n      for (String mapperLocation : this.mapperLocations) {\n        try {\n          Resource[] mappers = resourceResolver.getResources(mapperLocation);\n          resources.addAll(Arrays.asList(mappers));\n        } catch (IOException e) {\n          \u002F\u002F ignore\n        }\n      }\n    }\n    return resources.toArray(new Resource[resources.size()]);\n  }\n}\n\n可以看到mybatis初始化所需要的很多属性都在这里，相当于一个javabean。\n\n下面重点看一下MybatisAutoConfiguration\n@org.springframework.context.annotation.Configuration\n@ConditionalOnClass({ SqlSessionFactory.class, SqlSessionFactoryBean.class })\n@ConditionalOnBean(DataSource.class)\n@EnableConfigurationProperties(MybatisProperties.class)\n@AutoConfigureAfter(DataSourceAutoConfiguration.class)\npublic class MybatisAutoConfiguration {\n\n  private static final Logger logger = LoggerFactory.getLogger(MybatisAutoConfiguration.class);\n\n  private final MybatisProperties properties;\n\n  private final Interceptor[] interceptors;\n\n  private final ResourceLoader resourceLoader;\n\n  private final DatabaseIdProvider databaseIdProvider;\n\n  private final List\u003CConfigurationCustomizer\u003E configurationCustomizers;\n\n  public MybatisAutoConfiguration(MybatisProperties properties,\n                                  ObjectProvider\u003CInterceptor[]\u003E interceptorsProvider,\n                                  ResourceLoader resourceLoader,\n                                  ObjectProvider\u003CDatabaseIdProvider\u003E databaseIdProvider,\n                                  ObjectProvider\u003CList\u003CConfigurationCustomizer\u003E\u003E configurationCustomizersProvider) {\n    this.properties = properties;\n    this.interceptors = interceptorsProvider.getIfAvailable();\n    this.resourceLoader = resourceLoader;\n    this.databaseIdProvider = databaseIdProvider.getIfAvailable();\n    this.configurationCustomizers = configurationCustomizersProvider.getIfAvailable();\n  }\n\n  @PostConstruct\n  public void checkConfigFileExists() {\n    if (this.properties.isCheckConfigLocation() && StringUtils.hasText(this.properties.getConfigLocation())) {\n      Resource resource = this.resourceLoader.getResource(this.properties.getConfigLocation());\n      Assert.state(resource.exists(), \"Cannot find config location: \" + resource\n          + \" (please add config file or check your Mybatis configuration)\");\n    }\n  }\n\n  @Bean\n  @ConditionalOnMissingBean\n  public SqlSessionFactory sqlSessionFactory(DataSource dataSource) throws Exception {\n    SqlSessionFactoryBean factory = new SqlSessionFactoryBean();\n    factory.setDataSource(dataSource);\n    factory.setVfs(SpringBootVFS.class);\n    if (StringUtils.hasText(this.properties.getConfigLocation())) {\n      factory.setConfigLocation(this.resourceLoader.getResource(this.properties.getConfigLocation()));\n    }\n    Configuration configuration = this.properties.getConfiguration();\n    if (configuration == null && !StringUtils.hasText(this.properties.getConfigLocation())) {\n      configuration = new Configuration();\n    }\n    if (configuration != null && !CollectionUtils.isEmpty(this.configurationCustomizers)) {\n      for (ConfigurationCustomizer customizer : this.configurationCustomizers) {\n        customizer.customize(configuration);\n      }\n    }\n    factory.setConfiguration(configuration);\n    if (this.properties.getConfigurationProperties() != null) {\n      factory.setConfigurationProperties(this.properties.getConfigurationProperties());\n    }\n    if (!ObjectUtils.isEmpty(this.interceptors)) {\n      factory.setPlugins(this.interceptors);\n    }\n    if (this.databaseIdProvider != null) {\n      factory.setDatabaseIdProvider(this.databaseIdProvider);\n    }\n    if (StringUtils.hasLength(this.properties.getTypeAliasesPackage())) {\n      factory.setTypeAliasesPackage(this.properties.getTypeAliasesPackage());\n    }\n    if (StringUtils.hasLength(this.properties.getTypeHandlersPackage())) {\n      factory.setTypeHandlersPackage(this.properties.getTypeHandlersPackage());\n    }\n    if (!ObjectUtils.isEmpty(this.properties.resolveMapperLocations())) {\n      factory.setMapperLocations(this.properties.resolveMapperLocations());\n    }\n\n    return factory.getObject();\n  }\n\n  @Bean\n  @ConditionalOnMissingBean\n  public SqlSessionTemplate sqlSessionTemplate(SqlSessionFactory sqlSessionFactory) {\n    ExecutorType executorType = this.properties.getExecutorType();\n    if (executorType != null) {\n      return new SqlSessionTemplate(sqlSessionFactory, executorType);\n    } else {\n      return new SqlSessionTemplate(sqlSessionFactory);\n    }\n  }\n\n  public static class AutoConfiguredMapperScannerRegistrar\n      implements BeanFactoryAware, ImportBeanDefinitionRegistrar, ResourceLoaderAware {\n\n    private BeanFactory beanFactory;\n\n    private ResourceLoader resourceLoader;\n\n    @Override\n    public void registerBeanDefinitions(AnnotationMetadata importingClassMetadata, BeanDefinitionRegistry registry) {\n\n      ClassPathMapperScanner scanner = new ClassPathMapperScanner(registry);\n\n      try {\n        if (this.resourceLoader != null) {\n          scanner.setResourceLoader(this.resourceLoader);\n        }\n\n        List\u003CString\u003E packages = AutoConfigurationPackages.get(this.beanFactory);\n        if (logger.isDebugEnabled()) {\n          for (String pkg : packages) {\n            logger.debug(\"Using auto-configuration base package '{}'\", pkg);\n          }\n        }\n\n        scanner.setAnnotationClass(Mapper.class);\n        scanner.registerFilters();\n        scanner.doScan(StringUtils.toStringArray(packages));\n      } catch (IllegalStateException ex) {\n        logger.debug(\"Could not determine auto-configuration package, automatic mapper scanning disabled.\", ex);\n      }\n    }\n\n    @Override\n    public void setBeanFactory(BeanFactory beanFactory) throws BeansException {\n      this.beanFactory = beanFactory;\n    }\n\n    @Override\n    public void setResourceLoader(ResourceLoader resourceLoader) {\n      this.resourceLoader = resourceLoader;\n    }\n  }\n\n  @org.springframework.context.annotation.Configuration\n  @Import({ AutoConfiguredMapperScannerRegistrar.class })\n  @ConditionalOnMissingBean(MapperFactoryBean.class)\n  public static class MapperScannerRegistrarNotFoundConfiguration {\n\n    @PostConstruct\n    public void afterPropertiesSet() {\n      logger.debug(\"No {} found.\", MapperFactoryBean.class.getName());\n    }\n  }\n\n}\n这个类就是一个Configuration（配置类），它里面定义很多bean，其中最重要的就是SqlSessionFactory的bean实例，该实例是mybatis的核心功能，用它创建SqlSession，对数据库进行CRUD操作。\n除此之外，MybatisAutoConfiguration类还包含了：\n@ConditionalOnClass 配置了只有包含SqlSessionFactory.class和SqlSessionFactoryBean.class，该配置类才生效\n\n@ConditionalOnBean 配置了只有包含dataSource实例时，该配置类才生效\n\n@EnableConfigurationProperties 该注解会自动填充MybatisProperties实例中的属性\n\nAutoConfigureAfter 配置了该配置类在DataSourceAutoConfiguration类之后自动配置。\n这些注解都是一些辅助功能，决定Configuration是否生效，当然这些注解不是必须的。\n接下来，重点看看spring.factories文件有啥内容\norg.springframework.boot.autoconfigure.EnableAutoConfiguration=\\\norg.mybatis.spring.boot.autoconfigure.MybatisAutoConfiguration\n里面只有一行配置，即key为EnableAutoConfiguration，value为MybatisAutoConfiguration。\n好了，介绍了这么多东西，现在我们来总结一下，\nstarter几个要素如下图所示：\n?\n编写starter需要哪些步骤：\n1.需要定义一个名称为xxx-spring-boot-starter的空项目，里面不包含任何代码，可以有pom.xml和pom.properties文件。\n2.pom.xml文件中包含了名称为xxx-spring-boot-autoconfigure的项目\n3.xxx-spring-boot-autoconfigure项目中包含了名称为xxxAutoConfiguration的类，该类可以定义一些bean实例。当然，Configuration类上可以打一些如：ConditionalOnClass、ConditionalOnBean、EnableConfigurationProperties等注解。\n4.需要在spring.factories文件中增加key为EnableAutoConfiguration，value为\nxxxAutoConfiguration。\n我们试着按照这四步，自己编写一个starter看看能否成功，验证一下总结的内容是否正确。\n三、编写自己的starter\n先创建一个空项目\n\n\n该项目名称为id-generate-starter，注意为了方便我把项目重命名了，原本应该是叫id-generate-spring-boot-starter的，如下图所示\n\n?\n\npom.xml文件定义如下：\n\u003C?xml version=\"1.0\" encoding=\"UTF-8\"?\u003E\n\n\u003Cproject xmlns=\"http:\u002F\u002Fmaven.apache.org\u002FPOM\u002F4.0.0\" xmlns:xsi=\"http:\u002F\u002Fwww.w3.org\u002F2001\u002FXMLSchema-instance\" xsi:schemaLocation=\"http:\u002F\u002Fmaven.apache.org\u002FPOM\u002F4.0.0 http:\u002F\u002Fmaven.apache.org\u002Fxsd\u002Fmaven-4.0.0.xsd\"\u003E\n    \u003CmodelVersion\u003E4.0.0\u003C\u002FmodelVersion\u003E\n\n    \u003Cversion\u003E1.3.1\u003C\u002Fversion\u003E\n    \u003CgroupId\u003Ecom.sue\u003C\u002FgroupId\u003E\n    \u003CartifactId\u003Eid-generate-spring-boot-starter\u003C\u002FartifactId\u003E\n    \u003Cname\u003Eid-generate-spring-boot-starter\u003C\u002Fname\u003E\n    \u003Cdependencies\u003E\n        \u003Cdependency\u003E\n            \u003CgroupId\u003Ecom.sue\u003C\u002FgroupId\u003E\n            \u003CartifactId\u003Eid-generate-spring-boot-autoconfigure\u003C\u002FartifactId\u003E\n            \u003Cversion\u003E1.3.1\u003C\u002Fversion\u003E\n        \u003C\u002Fdependency\u003E\n    \u003C\u002Fdependencies\u003E\n\u003C\u002Fproject\u003E\n我们看到，它只引入了id-generate-spring-boot-autoconfigure。当然如果有需要这里还可以引入多个autoconfigure或者多个其他jar包或者。\n2.创建一个名称为id-generate-autoconfigure的项目\n同样为了方便我把项目重命名了，原本是叫id-generate-spring-boot-autoconfigure，如下图所示：\n?\n该项目当中包含：pom.xml、spring.factories、IdGenerateAutoConfiguration、IdGenerateService 和 IdProperties 这5个关键文件，下面我们逐一看看。\n先从pom.xml\n\u003C?xml version=\"1.0\" encoding=\"UTF-8\"?\u003E\n\n\u003Cproject xmlns=\"http:\u002F\u002Fmaven.apache.org\u002FPOM\u002F4.0.0\" xmlns:xsi=\"http:\u002F\u002Fwww.w3.org\u002F2001\u002FXMLSchema-instance\" xsi:schemaLocation=\"http:\u002F\u002Fmaven.apache.org\u002FPOM\u002F4.0.0 http:\u002F\u002Fmaven.apache.org\u002Fxsd\u002Fmaven-4.0.0.xsd\"\u003E\n\n    \u003Cparent\u003E\n        \u003CgroupId\u003Eorg.springframework.boot\u003C\u002FgroupId\u003E\n        \u003CartifactId\u003Espring-boot-starter-parent\u003C\u002FartifactId\u003E\n        \u003Cversion\u003E2.0.4.RELEASE\u003C\u002Fversion\u003E\n    \u003C\u002Fparent\u003E\n    \u003CmodelVersion\u003E4.0.0\u003C\u002FmodelVersion\u003E\n\n    \u003Cversion\u003E1.3.1\u003C\u002Fversion\u003E\n    \u003CgroupId\u003Ecom.sue\u003C\u002FgroupId\u003E\n    \u003CartifactId\u003Eid-generate-spring-boot-autoconfigure\u003C\u002FartifactId\u003E\n    \u003Cname\u003Eid-generate-spring-boot-autoconfigure\u003C\u002Fname\u003E\n\n\n    \u003Cdependencies\u003E\n\n        \u003Cdependency\u003E\n            \u003CgroupId\u003Eorg.springframework.boot\u003C\u002FgroupId\u003E\n            \u003CartifactId\u003Espring-boot-starter\u003C\u002FartifactId\u003E\n        \u003C\u002Fdependency\u003E\n\n        \u003C!-- Compile dependencies --\u003E\n        \u003Cdependency\u003E\n            \u003CgroupId\u003Eorg.springframework.boot\u003C\u002FgroupId\u003E\n            \u003CartifactId\u003Espring-boot-autoconfigure\u003C\u002FartifactId\u003E\n        \u003C\u002Fdependency\u003E\n\n\n        \u003C!-- @ConfigurationProperties annotation processing (metadata for IDEs) --\u003E\n        \u003Cdependency\u003E\n            \u003CgroupId\u003Eorg.springframework.boot\u003C\u002FgroupId\u003E\n            \u003CartifactId\u003Espring-boot-configuration-processor\u003C\u002FartifactId\u003E\n            \u003Coptional\u003Etrue\u003C\u002Foptional\u003E\n        \u003C\u002Fdependency\u003E\n    \u003C\u002Fdependencies\u003E\n\n\n    \u003Cbuild\u003E\n        \u003Cplugins\u003E\n            \u003Cplugin\u003E\n                \u003CgroupId\u003Eorg.apache.maven.plugins\u003C\u002FgroupId\u003E\n                \u003CartifactId\u003Emaven-compiler-plugin\u003C\u002FartifactId\u003E\n                \u003Cconfiguration\u003E\n                    \u003Csource\u003E1.8\u003C\u002Fsource\u003E\n                    \u003Ctarget\u003E1.8\u003C\u002Ftarget\u003E\n                \u003C\u002Fconfiguration\u003E\n            \u003C\u002Fplugin\u003E\n        \u003C\u002Fplugins\u003E\n    \u003C\u002Fbuild\u003E\n\u003C\u002Fproject\u003E\n\n我们可以看到，这个文件比较简单就引入了：\nspring-boot-starter    springboot的相关jar包\n\n\nspring-boot-autoconfigure    springboot自动配置相关jar包\n\n\nspring-boot-configuration-processor  springboot生成IDE提示功能相关jar包\n重点看看spring.factories文件\norg.springframework.boot.autoconfigure.EnableAutoConfiguration=com.sue.IdGenerateAutoConfiguration\n它里面只包含一行配置，其中key是EnableAutoConfiguration，value是IdGenerateAutoConfiguration。\n再重点看一下IdGenerateAutoConfiguration\n@ConditionalOnClass(IdProperties.class)\n@EnableConfigurationProperties(IdProperties.class)\n@Configuration\npublic class IdGenerateAutoConfiguration {\n\n    @Autowired\n    private IdProperties properties;\n\n    @Bean\n    public IdGenerateService idGenerateService() {\n        return new IdGenerateService(properties.getWorkId());\n    }\n}\n该类是一个使用了@Configuration注解标记为了配置类，生效的条件是@ConditionalOnClass注解中检测到包含IdProperties.class。并且使用@EnableConfigurationProperties注解会自动注入IdProperties的实例。\n此外，最关键的点是该类里面创建了idGenerateService的bean实例，这是自动配置的精髓。\n再看看IdGenerateService\npublic class IdGenerateService {\n\n    private Long workId;\n\n    public IdGenerateService(Long workId) {\n        this.workId = workId;\n    }\n\n\n    public Long generate() {\n        return new Random().nextInt(100) + this.workId;\n    }\n}\n我们可以看到它是一个普通的类，甚至都没有使用@Service注解，里面有个generate方法，根据workId的值和随机数动态生成id。\n最后看看IdProperties\n@ConfigurationProperties(prefix = IdProperties.PREFIX)\npublic class IdProperties {\n\n\n    public static final String PREFIX = \"sue\";\n\n    private Long workId;\n\n    public Long getWorkId() {\n        return workId;\n    }\n\n    public void setWorkId(Long workId) {\n        this.workId = workId;\n    }\n}\n它是一个配置实体类，里面包含了相关的配置文件。使用@ConfigurationProperties注解，会自动把application.properties文件中以sue开通的，参数名称跟IdProperties中一样的参数值，自动注入到IdProperties对象中。\n3.创建一个名称为id-generate-test的项目\n这个项目主要用于测试。\n?\n该项目里面包含：pom.xml、application.properties、Application 和 TestRunner 文件。\n先看看pom.xml文件\n\n\u003C?xml version=\"1.0\" encoding=\"UTF-8\"?\u003E\n\n\u003Cproject xmlns=\"http:\u002F\u002Fmaven.apache.org\u002FPOM\u002F4.0.0\" xmlns:xsi=\"http:\u002F\u002Fwww.w3.org\u002F2001\u002FXMLSchema-instance\" xsi:schemaLocation=\"http:\u002F\u002Fmaven.apache.org\u002FPOM\u002F4.0.0 http:\u002F\u002Fmaven.apache.org\u002Fxsd\u002Fmaven-4.0.0.xsd\"\u003E\n\n    \u003CmodelVersion\u003E4.0.0\u003C\u002FmodelVersion\u003E\n\n    \u003Cversion\u003E1.3.1\u003C\u002Fversion\u003E\n    \u003CgroupId\u003Ecom.sue\u003C\u002FgroupId\u003E\n    \u003CartifactId\u003Espring-boot-id-generate-test\u003C\u002FartifactId\u003E\n    \u003Cname\u003Espring-boot-id-generate-test\u003C\u002Fname\u003E\n\n\n    \u003Cdependencies\u003E\n\n        \u003Cdependency\u003E\n            \u003CgroupId\u003Ecom.sue\u003C\u002FgroupId\u003E\n            \u003CartifactId\u003Eid-generate-spring-boot-starter\u003C\u002FartifactId\u003E\n            \u003Cversion\u003E1.3.1\u003C\u002Fversion\u003E\n        \u003C\u002Fdependency\u003E\n    \u003C\u002Fdependencies\u003E\n\u003C\u002Fproject\u003E\n\n由于只测试刚刚定义的id生成功能，所以只引入的id-generate-spring-boot-starter jar包。\napplication.properties配置资源文件\nsue.workId=123\n只有一行配置，因为我们的IdProperties中目前只需要这一个参数。\nApplication是测试程序启动类\n@SpringBootApplication\npublic class Application {\n\n    public static void main(String[] args) {\n        SpringApplication.run(Application.class, args);\n    }\n}\n很简单，就是一个普通的springboot启动类\nTestRunner是我们的测试类\n@Component\npublic class TestRunner implements ApplicationRunner {\n\n    @Autowired\n    private IdGenerateService idGenerateService;\n\n    public void run(ApplicationArguments args) throws Exception {\n        Long sysNo = idGenerateService.generate();\n        System.out.println(sysNo);\n    }\n}\n它实现了ApplicationRunner接口，所以在springboot启动的时候会调用该类的run方法。\n好了，所有自定义starter的代码和测试代码都已经就绪。接下，运行一下Application类的main方法。\n运行结果：\n\n176\n验证成功了\n接下来，我们分析一下starter的底层实现。\n四、starter的底层实现\n通过上面编写自己的starter的例子，相信大家对starter的认识进一步加强了，现在带大家分析一下starter的底层是如何实现的。\n\nid-generate-starter.jar是一个空项目，依赖于 id-generate-autoconfiguration.jar。 id-generate-starter.jar是一个入口，或者说如果大家知道门面模式，它其实也是一个门面，其他业务系统想引入相应的功能，必须要通过这个门面。\n\n我们重点分析一下 id-generate-autoconfiguration.jar\n该jar包核心内容是：IdGenerateConfiguration，这个配置类中创建了IdGenerateService对象，IdGenerateService是我们所需要自动配置的具体功能。\n接下来一个最重要的问题：\nIdGenerateConfiguration为什么会自动加载的呢？\n还记得我们定义的spring.factories文件不？\norg.springframework.boot.autoconfigure.EnableAutoConfiguration=com.sue.IdGenerateAutoConfiguration\n它里面只包含一行配置，其中key是EnableAutoConfiguration，value是IdGenerateAutoConfiguration。\n要搞明白这个过程，要从Application类的@SpringBootApplication注解开始。\n@Target(ElementType.TYPE)\n@Retention(RetentionPolicy.RUNTIME)\n@Documented\n@Inherited\n@SpringBootConfiguration\n@EnableAutoConfiguration\n@ComponentScan(excludeFilters = {\n    @Filter(type = FilterType.CUSTOM, classes = TypeExcludeFilter.class),\n    @Filter(type = FilterType.CUSTOM, classes = AutoConfigurationExcludeFilter.class) })\npublic @interface SpringBootApplication {\n\n\n  @AliasFor(annotation = EnableAutoConfiguration.class)\n  Class\u003C?\u003E[] exclude() default {};\n\n  @AliasFor(annotation = EnableAutoConfiguration.class)\n  String[] excludeName() default {};\n\n  @AliasFor(annotation = ComponentScan.class, attribute = \"basePackages\")\n  String[] scanBasePackages() default {};\n\n  @AliasFor(annotation = ComponentScan.class, attribute = \"basePackageClasses\")\n  Class\u003C?\u003E[] scanBasePackageClasses() default {};\n\n}\n从上面可以看出该注解里面包含了@EnableAutoConfiguration注解。\n@Target(ElementType.TYPE)\n@Retention(RetentionPolicy.RUNTIME)\n@Documented\n@Inherited\n@AutoConfigurationPackage\n@Import(AutoConfigurationImportSelector.class)\npublic @interface EnableAutoConfiguration {\n\n  String ENABLED_OVERRIDE_PROPERTY = \"spring.boot.enableautoconfiguration\";\n\n  Class\u003C?\u003E[] exclude() default {};\n\n  String[] excludeName() default {};\n\n}\n@EnableAutoConfiguration注解会引入AutoConfigurationImportSelector类。\n该类的selectImports方法一个关键方法\n  @Override\n  public String[] selectImports(AnnotationMetadata annotationMetadata) {\n    \u002F\u002F配置有没有配置spring.boot.enableautoconfiguration开关，默认为true\n    \u002F\u002F如果为false，则不执行自动配置的功能，直接返回\n    if (!isEnabled(annotationMetadata)) {\n      return NO_IMPORTS;\n    }\n    \u002F\u002F找spring-autoconfigure-metadata.properties中的元素\n    AutoConfigurationMetadata autoConfigurationMetadata = AutoConfigurationMetadataLoader\n        .loadMetadata(this.beanClassLoader);\n    \u002F\u002F获取EnableAutoConfiguration注解中的属性 \n    AnnotationAttributes attributes = getAttributes(annotationMetadata);\n    \u002F\u002F获取工程下所有配置key为EnableAutoConfiguration的值，即IdGenerateConfiguration等类。\n    List\u003CString\u003E configurations = getCandidateConfigurations(annotationMetadata,\n        attributes);\n    \u002F\u002F删除重复的值    \n    configurations = removeDuplicates(configurations);\n    \u002F\u002F获取需要排除的规则列表\n    Set\u003CString\u003E exclusions = getExclusions(annotationMetadata, attributes);\n    \u002F\u002F检查\n    checkExcludedClasses(configurations, exclusions);\n    \u002F\u002F删除需要排除的值\n    configurations.removeAll(exclusions);\n    \u002F\u002F根据配置文件中配置的开关，过滤一部分不满足条件的值\n    configurations = filter(configurations, autoConfigurationMetadata);\n    fireAutoConfigurationImportEvents(configurations, exclusions);\n    return StringUtils.toStringArray(configurations);\n  }\n这里就是starter能够自动配置的秘密，这里我不打算深入介绍，因为我后面会分享一个专题：spring自动配置的那些秘密。\n\n此外，有些朋友看其他人定义的springboot starter可能会有疑惑。\n我举几个例子：\n先看看druid-spring-boot-starter\n?\nalibaba定义的druid-spring-boot-starter只有xxx-spring-boot-starter.jar文件，而没有xxx-spring-boot-autoconfigure.jar文件。\n再看看spring-boot-starter-jdbc\n?\n更神奇的是这个文件中连pom.xml都没有，一脸懵逼。。。。。。。\n是不是我讲错了。\n\n其实没有。\nspringboot的原则是约定优于配置。\n从spring-boot-starter-jdbc内部空实现来看，它的约定是要把xxx-spring-boot-starter.jar和xxx-spring-boot-autoconfigure.jar区分开的。个人认为，alibaba定义得并不好，没有遵照springboot的约定，虽然功能不受影响。\n而springboot自己定义的spring-boot-starter-jdbc为什么连pom.xml文件也没有呢？\n它不需要依赖xxx-spring-boot-autoconfigure.jar文件吗？\n因为，springboot把所有的自动配置的类都统一放到spring-boot-autoconfigure jar包下面了\n?\n?\nspringboot这样集中管理自动配置，而不需要从各个子包中遍历，我个人认为是为了查找效率。\n我们最后再看看spring-cloud-starter-openfegin\n\n?\n明显看到，它是遵循了我们说的原则的。\n\n除此之外，还有一个原则一起提一下。\nspringboot和springcloud系列定义jar包的名称是 :\nspring-boot-starter-xxx.jar\nspring-cloud-starter-xxx.jar\n而我们自己的项目定义的jar应该是：\nxxx-spring-boot-starter.jar\n欢迎朋友们关注我的公众账号：苏三说技术，如果大家有一些问题可以给我留言。谢谢大家。\n\n","brief":"继上一篇《面试时被问到单例模式，怎么回答才能让面试官眼前一亮？》之后，我打算对springboot的部分功能做一下介绍。因为现在springboot使用的人越来...","summary":"继上一篇《面试时被问到单例模式，怎么回答才能让面试官眼前一亮？》之后，我打算对springboot的部分功能做一下介绍。因为现在springboot使用的人越来...","abstract":"继上一篇《面试时被问到单例模式，怎么回答才能让面试官眼前一亮？》之后，我打算对springboot的部分功能做一下介绍。因为现在springboot使用的人越来...","posterSummary":"继上一篇《面试时被问到单例模式，怎么回答才能让面试官眼前一亮？》之后，我打算对springboot的部分功能做一下介绍。因为现在springboot使用的人越来越多，已经成了java行业主流的框架。","description":"","picture":"https:\u002F\u002Fask.qcloudimg.com\u002Fhttp-save\u002Fyehe-5604447\u002Ftxi1gdak8m.png","coverImageUrl":"https:\u002F\u002Fask.qcloudimg.com\u002Fhttp-save\u002Fyehe-5604447\u002Ftxi1gdak8m.png","sourceType":99,"sourceDetail":{},"channelType":4,"channelDetail":{"source":"wechat","originalTime":"2020-09-03","author":"苏三说技术","nickName":"苏三说技术","userName":"gh_9f551dfec941","alias":"","authorName":"因为热爱所以坚持ing"},"authorId":5604447,"columnId":89029,"writeTime":1602744298,"updateTime":1602744298,"viewCount":260,"likeCount":4,"commentCount":0,"favorCount":4,"weight":0,"status":2,"draftId":0,"tagIds":[],"tags":[],"isCommentEnable":true,"highQuality":false,"skipAds":false,"showAds":false,"focusRead":false,"author":{"id":5604447,"name":"苏三说技术","label":"公众号：【苏三说技术】，工作问题总结，技术分享，架构设计，底层原理，日常随笔。","avatar":"https:\u002F\u002Fask.qcloudimg.com\u002Fhttp-save\u002Fyehe-5604447\u002Fz1kfmbmf57.jpeg","province":"1257","city":"1258","company":"","title":"","school":"","major":"","homePage":"http:\u002F\u002Fsusan.net.cn","region":1,"jobType":1,"graduationDate":"","education":0,"specialityIds":[10164,10323,10712,10773,10661],"specialities":[],"gender":1,"trade":"","growthLevel":0,"isProfessionVerified":false,"status":1,"createTime":"2019-06-13 05:11:23","skipAds":false,"upvoteCount":1,"followingCount":1,"followerCount":17,"questionCount":0,"answerCount":1,"followQuestionCount":0,"followTagCount":0,"favorAnswerCount":0,"beHandPickedCount":0,"followColumnCount":0,"articleCount":0,"badgeInfo":{},"statInfo":{"articleCount":47,"validArticleCount":47,"joinedColumnCount":1,"followColumnCount":2,"uid":5604447,"beLikeNum":161,"articleReadNum":9239,"articleRecommNum":5,"answerRecommNum":0,"contribNum":0,"createTime":"2020-10-09 18:24:03","articleCommentNum":0,"articleFavNum":76,"yesterdayBeLikeNum":161,"yesterdayArticleReadNum":9212,"yesterdayArticleRecommNum":5,"yesterdayAnswerRecommNum":0,"yesterdayContribNum":0,"yesterdayArticleCommentNum":0,"yesterdayArticleFavNum":76},"rank":382,"userTeams":[],"fromInfo":{}},"column":{"id":89029,"name":"苏三说技术","desc":"","icon":"https:\u002F\u002Fask.qcloudimg.com\u002Fhttp-save\u002Fyehe-5604447\u002Fvpcm3wrjk0.png","background":"","status":2,"creatorId":5604447,"memberCount":1,"articleCount":47,"followCount":13,"createdTime":1598622707,"creator":{"id":5604447,"name":"苏三说技术","label":"公众号：【苏三说技术】，工作问题总结，技术分享，架构设计，底层原理，日常随笔。","avatar":"https:\u002F\u002Fask.qcloudimg.com\u002Fhttp-save\u002Fyehe-5604447\u002Fz1kfmbmf57.jpeg","province":"1257","city":"1258","company":"","title":"","school":"","major":"","homePage":"http:\u002F\u002Fsusan.net.cn","region":1,"jobType":1,"graduationDate":"","education":0,"specialityIds":[10164,10323,10712,10773,10661],"specialities":[],"gender":1,"trade":"","growthLevel":0,"isProfessionVerified":false,"status":1,"createTime":"2019-06-13 05:11:23","skipAds":false}},"translator":{},"textLinks":[]}}},"commentsData":{"fetchStatus":"none","done":false,"nextPageNumber":1,"pageSize":15,"total":0,"list":[],"error":null},"relatedArticles":{"fetchStatus":"loaded","pageSize":6,"list":[{"id":1785733,"articleId":1785733,"title":"spring中那些让你爱不释手的代码技巧（续集）","content":"","plain":"","brief":"","summary":"上一篇文章《spring中这些能升华代码的技巧，可能会让你爱不释手》发表之后，受到了不少读者的好评，很多读者都在期待续集。今天非常高兴的通知大家，你们要的续集来...","abstract":"上一篇文章《spring中这些能升华代码的技巧，可能会让你爱不释手》发表之后，受到了不少读者的好评，很多读者都在期待续集。今天非常高兴的通知大家，你们要的续集来...","posterSummary":"上一篇文章《spring中这些能升华代码的技巧，可能会让你爱不释手》发表之后，受到了不少读者的好评，很多读者都在期待续集。今天非常高兴的通知大家，你们要的续集来了。本文继续总结我认为spring中还不错的知识点，希望对您有所帮助。","description":"","picture":"","coverImageUrl":"","sourceType":1,"sourceDetail":{},"channelType":0,"channelDetail":{"source":"wechat","originalTime":"2021-01-24","author":"苏三说技术","nickName":"苏三说技术","userName":"gh_9f551dfec941","alias":"","authorName":"因为热爱所以坚持ing"},"authorId":5604447,"columnId":89029,"writeTime":0,"updateTime":0,"viewCount":111,"likeCount":3,"commentCount":0,"favorCount":0,"weight":0,"status":2,"draftId":0,"tagIds":[],"tags":[],"isCommentEnable":true,"highQuality":false,"skipAds":false,"showAds":false,"focusRead":false,"author":{"id":5604447,"name":"苏三说技术","label":"公众号：【苏三说技术】，工作问题总结，技术分享，架构设计，底层原理，日常随笔。","avatar":"https:\u002F\u002Fask.qcloudimg.com\u002Fhttp-save\u002Fyehe-5604447\u002Fz1kfmbmf57.jpeg","province":"1257","city":"1258","company":"","title":"","school":"","major":"","homePage":"http:\u002F\u002Fsusan.net.cn","region":1,"jobType":1,"graduationDate":"","education":0,"specialityIds":[10164,10323,10712,10773,10661],"specialities":[],"gender":1,"trade":"","growthLevel":0,"isProfessionVerified":false,"status":1,"createTime":"2019-06-13 05:11:23","skipAds":false},"column":{"id":89029,"name":"苏三说技术","desc":"","icon":"https:\u002F\u002Fask.qcloudimg.com\u002Fhttp-save\u002Fyehe-5604447\u002Fvpcm3wrjk0.png","background":"","status":2,"creatorId":5604447,"memberCount":1,"articleCount":47,"followCount":13,"createdTime":1598622707}},{"id":1776554,"articleId":1776554,"title":"spring中这些能升华代码的技巧，可能会让你爱不释手","content":"","plain":"","brief":"","summary":"最近越来越多的读者认可我的文章，还是件挺让人高兴的事情。有些读者私信我说希望后面多分享spring方面的文章，这样能够在实际工作中派上用场。正好我对spring...","abstract":"最近越来越多的读者认可我的文章，还是件挺让人高兴的事情。有些读者私信我说希望后面多分享spring方面的文章，这样能够在实际工作中派上用场。正好我对spring...","posterSummary":"最近越来越多的读者认可我的文章，还是件挺让人高兴的事情。有些读者私信我说希望后面多分享spring方面的文章，这样能够在实际工作中派上用场。正好我对spring源码有过一定的研究，并结合我这几年实际的工作经验，把spring中我认为不错的知识点总结一下，希望对您有所帮助。","description":"","picture":"","coverImageUrl":"","sourceType":1,"sourceDetail":{},"channelType":0,"channelDetail":{"source":"wechat","originalTime":"2021-01-11","author":"苏三说技术","nickName":"苏三说技术","userName":"gh_9f551dfec941","alias":"","authorName":"因为热爱所以坚持ing"},"authorId":5604447,"columnId":89029,"writeTime":0,"updateTime":0,"viewCount":195,"likeCount":3,"commentCount":0,"favorCount":0,"weight":0,"status":2,"draftId":0,"tagIds":[],"tags":[],"isCommentEnable":true,"highQuality":false,"skipAds":false,"showAds":false,"focusRead":false,"author":{"id":5604447,"name":"苏三说技术","label":"公众号：【苏三说技术】，工作问题总结，技术分享，架构设计，底层原理，日常随笔。","avatar":"https:\u002F\u002Fask.qcloudimg.com\u002Fhttp-save\u002Fyehe-5604447\u002Fz1kfmbmf57.jpeg","province":"1257","city":"1258","company":"","title":"","school":"","major":"","homePage":"http:\u002F\u002Fsusan.net.cn","region":1,"jobType":1,"graduationDate":"","education":0,"specialityIds":[10164,10323,10712,10773,10661],"specialities":[],"gender":1,"trade":"","growthLevel":0,"isProfessionVerified":false,"status":1,"createTime":"2019-06-13 05:11:23","skipAds":false},"column":{"id":89029,"name":"苏三说技术","desc":"","icon":"https:\u002F\u002Fask.qcloudimg.com\u002Fhttp-save\u002Fyehe-5604447\u002Fvpcm3wrjk0.png","background":"","status":2,"creatorId":5604447,"memberCount":1,"articleCount":47,"followCount":13,"createdTime":1598622707}},{"id":1718111,"articleId":1718111,"title":"spring的自定义标签都不会？你可能只学到了spring的皮毛","content":"","plain":"","brief":"","summary":"通常我们在applicationContext.xml文件中使用spring的标签时，会发现spring默认支持的只有5种，如图所示","abstract":"通常我们在applicationContext.xml文件中使用spring的标签时，会发现spring默认支持的只有5种，如图所示","posterSummary":"","description":"","picture":"https:\u002F\u002Fask.qcloudimg.com\u002Fhttp-save\u002Fyehe-5604447\u002Fi1bnfn5cah.png","coverImageUrl":"https:\u002F\u002Fask.qcloudimg.com\u002Fhttp-save\u002Fyehe-5604447\u002Fi1bnfn5cah.png","sourceType":1,"sourceDetail":{},"channelType":0,"channelDetail":{"source":"wechat","originalTime":"2020-06-06","author":"苏三说技术","nickName":"苏三说技术","userName":"gh_9f551dfec941","alias":"","authorName":"苏三说技术"},"authorId":5604447,"columnId":89029,"writeTime":0,"updateTime":0,"viewCount":160,"likeCount":5,"commentCount":0,"favorCount":2,"weight":0,"status":2,"draftId":0,"tagIds":[],"tags":[],"isCommentEnable":true,"highQuality":false,"skipAds":false,"showAds":false,"focusRead":false,"author":{"id":5604447,"name":"苏三说技术","label":"公众号：【苏三说技术】，工作问题总结，技术分享，架构设计，底层原理，日常随笔。","avatar":"https:\u002F\u002Fask.qcloudimg.com\u002Fhttp-save\u002Fyehe-5604447\u002Fz1kfmbmf57.jpeg","province":"1257","city":"1258","company":"","title":"","school":"","major":"","homePage":"http:\u002F\u002Fsusan.net.cn","region":1,"jobType":1,"graduationDate":"","education":0,"specialityIds":[10164,10323,10712,10773,10661],"specialities":[],"gender":1,"trade":"","growthLevel":0,"isProfessionVerified":false,"status":1,"createTime":"2019-06-13 05:11:23","skipAds":false},"column":{"id":89029,"name":"苏三说技术","desc":"","icon":"https:\u002F\u002Fask.qcloudimg.com\u002Fhttp-save\u002Fyehe-5604447\u002Fvpcm3wrjk0.png","background":"","status":2,"creatorId":5604447,"memberCount":1,"articleCount":47,"followCount":13,"createdTime":1598622707}},{"id":1783559,"articleId":1783559,"title":"SpringBoot之SpringBoot自定义Starter场景启动器","content":"","plain":"","brief":"","summary":"　　相信能看到这里的应该清楚什么是场景启动器,而SpringBoot能够快速整合第三方环境依靠的就是Maven整合依赖+自定义Starter","abstract":"　　相信能看到这里的应该清楚什么是场景启动器,而SpringBoot能够快速整合第三方环境依靠的就是Maven整合依赖+自定义Starter","posterSummary":"","description":"","picture":"","coverImageUrl":"","sourceType":1,"sourceDetail":{},"channelType":0,"channelDetail":{"source":"cnblogs","originalTime":"2021-01-29 15:04"},"authorId":7813369,"columnId":89597,"writeTime":0,"updateTime":0,"viewCount":106,"likeCount":3,"commentCount":0,"favorCount":0,"weight":0,"status":2,"draftId":0,"tagIds":[],"tags":[],"isCommentEnable":true,"highQuality":false,"skipAds":false,"showAds":false,"focusRead":false,"author":{"id":7813369,"name":"彼岸舞","label":"技术爱好者,寻求志同道合的朋友","avatar":"https:\u002F\u002Fask.qcloudimg.com\u002Fhttp-save\u002Fyehe-7813369\u002Fyu8390bdww.jpeg","province":"1001","city":"","company":"广州同望科技有限公司","title":"java开发工程师","school":"中国石油大学","major":"","homePage":"https:\u002F\u002Fcloud.tencent.com\u002Fdeveloper\u002Fuser\u002F7813369\u002Finventories","region":1,"jobType":1,"graduationDate":"","education":0,"specialityIds":[10164,10245,10773,10688,10700],"specialities":[],"gender":1,"trade":"","growthLevel":0,"isProfessionVerified":false,"status":1,"createTime":"2020-09-29 15:11:19","skipAds":false},"column":{"id":89597,"name":"java开发的那点事","desc":"","icon":"https:\u002F\u002Fimgcache.qq.com\u002Fqcloud\u002Fdeveloper\u002Fimages\u002Frelease\u002Fcolumn-icons\u002F12.png","background":"https:\u002F\u002Fimgcache.qq.com\u002Fqcloud\u002Fdeveloper\u002Fimages\u002Frelease\u002Fcolumn-bgs\u002F5.svg","status":2,"creatorId":7813369,"memberCount":1,"articleCount":191,"followCount":27,"createdTime":1601363996}},{"id":1180664,"articleId":1180664,"title":"Backbone源码研究 – Backbone.Model","content":"","plain":"","brief":"","summary":"都因为 IE8 不支持 Object.defineProperty，但是业务还不能脱离 IE7 和 IE8，故研究下 Backbone.Model 的实现机制，...","abstract":"都因为 IE8 不支持 Object.defineProperty，但是业务还不能脱离 IE7 和 IE8，故研究下 Backbone.Model 的实现机制，...","posterSummary":"都因为 IE8 不支持 Object.defineProperty，但是业务还不能脱离 IE7 和 IE8，故研究下 Backbone.Model 的实现机制，找机会给主流的 MVVM 框架补丁","description":"","picture":"","coverImageUrl":"","sourceType":1,"sourceDetail":{},"channelType":0,"channelDetail":{"source":"mxgw","originalTime":"2017-01-232017-01-23"},"authorId":1069296,"columnId":3883,"writeTime":0,"updateTime":0,"viewCount":101,"likeCount":0,"commentCount":0,"favorCount":0,"weight":0,"status":2,"draftId":0,"tagIds":[],"tags":[],"isCommentEnable":true,"highQuality":false,"skipAds":false,"showAds":false,"focusRead":false,"author":{"id":1069296,"name":"libo1106","label":"前端开发","avatar":"https:\u002F\u002Fask.qcloudimg.com\u002Favatar\u002F1069296\u002Feftwq8na1p.png","province":"","city":"","company":"腾讯","title":"前端开发","school":"","major":"","homePage":"https:\u002F\u002Fwww.mxgw.info\u002F","region":1,"jobType":1,"graduationDate":"","education":0,"specialityIds":[10167,10205,10310,10244,10539],"specialities":[],"gender":1,"trade":"website","growthLevel":0,"isProfessionVerified":true,"status":1,"createTime":"2017-11-01 10:53:25","skipAds":false},"column":{"id":3883,"name":"Web 开发","desc":"","icon":"https:\u002F\u002Fimgcache.qq.com\u002Fqcloud\u002Fdeveloper\u002Fimages\u002Frelease\u002Fcolumn-icons\u002F13.png","background":"https:\u002F\u002Fimgcache.qq.com\u002Fqcloud\u002Fdeveloper\u002Fimages\u002Frelease\u002Fcolumn-bgs\u002F5.svg","status":2,"creatorId":1069296,"memberCount":1,"articleCount":149,"followCount":29,"createdTime":1527672064}},{"id":1340375,"articleId":1340375,"title":"聊聊springboot2的ScheduledTasksEndpoint","content":"","plain":"","brief":"","summary":"本文主要研究下springboot2的ScheduledTasksEndpoint","abstract":"本文主要研究下springboot2的ScheduledTasksEndpoint","posterSummary":"","description":"","picture":"","coverImageUrl":"","sourceType":1,"sourceDetail":{},"channelType":0,"channelDetail":{"source":"wechat","originalTime":"2018-04-19","author":"go4it","nickName":"码匠的流水账","userName":"gh_121b87c80448","alias":"geek_luandun","authorName":"go4it"},"authorId":3346134,"columnId":72423,"writeTime":0,"updateTime":0,"viewCount":352,"likeCount":1,"commentCount":0,"favorCount":0,"weight":0,"status":2,"draftId":0,"tagIds":[],"tags":[],"isCommentEnable":true,"highQuality":false,"skipAds":false,"showAds":false,"focusRead":false,"author":{"id":3346134,"name":"codecraft","label":"","avatar":"https:\u002F\u002Fask.qcloudimg.com\u002Favatar\u002F3346134\u002Fq974qwd8i9.png","province":"","city":"","company":"","title":"","school":"","major":"","homePage":"","region":1,"jobType":1,"graduationDate":"","education":0,"specialityIds":[10164,10296,10323,10278,10620],"specialities":[],"gender":1,"trade":"","growthLevel":0,"isProfessionVerified":false,"status":1,"createTime":"2018-09-13 16:30:38","skipAds":false},"column":{"id":72423,"name":"码匠的流水账","desc":"","icon":"https:\u002F\u002Fimgcache.qq.com\u002Fqcloud\u002Fdeveloper\u002Fimages\u002Frelease\u002Fcolumn-icons\u002F8.png","background":"","status":2,"creatorId":3346134,"memberCount":1,"articleCount":2034,"followCount":59,"createdTime":1536827675}},{"id":1439660,"articleId":1439660,"title":"php版链表的实现","content":"","plain":"","brief":"","summary":"","abstract":"","posterSummary":"","description":"","picture":"","coverImageUrl":"","sourceType":1,"sourceDetail":{},"channelType":0,"channelDetail":{"source":"baoguoxiao","originalTime":"2018-04-242019-05-21"},"authorId":1340976,"columnId":77239,"writeTime":0,"updateTime":0,"viewCount":323,"likeCount":4,"commentCount":0,"favorCount":0,"weight":0,"status":2,"draftId":0,"tagIds":[],"tags":[],"isCommentEnable":true,"highQuality":false,"skipAds":false,"showAds":false,"focusRead":false,"author":{"id":1340976,"name":"魔王卷子","label":"","avatar":"https:\u002F\u002Fask.qcloudimg.com\u002Fcustom-avatar\u002F1340976\u002Fg7lowzbzn5.jpg","province":"","city":"","company":"","title":"","school":"","major":"","homePage":"","region":1,"jobType":1,"graduationDate":"","education":0,"specialityIds":[],"specialities":[],"gender":1,"trade":"website","growthLevel":0,"isProfessionVerified":false,"status":1,"createTime":"2018-02-09 12:56:47","skipAds":false},"column":{"id":77239,"name":"魔王卷子的专栏","desc":"","icon":"https:\u002F\u002Fimgcache.qq.com\u002Fqcloud\u002Fdeveloper\u002Fimages\u002Frelease\u002Fcolumn-icons\u002F1.png","background":"","status":2,"creatorId":1340976,"memberCount":1,"articleCount":85,"followCount":11,"createdTime":1558600344}},{"id":1645397,"articleId":1645397,"title":"Spring Boot 应用监控","content":"","plain":"","brief":"","summary":"当一个Spring Boot 应用运行的时候，开发者需要对Spring Boot应用进行实时监控，获得项目的报警需求，Spring Boot 提供了，actua...","abstract":"当一个Spring Boot 应用运行的时候，开发者需要对Spring Boot应用进行实时监控，获得项目的报警需求，Spring Boot 提供了，actua...","posterSummary":"当一个Spring Boot 应用运行的时候，开发者需要对Spring Boot应用进行实时监控，获得项目的报警需求，Spring Boot 提供了，actuator 来帮助开发者获取应用程序运行时的数据。","description":"","picture":"","coverImageUrl":"","sourceType":1,"sourceDetail":{},"channelType":0,"channelDetail":{},"authorId":1140960,"columnId":4626,"writeTime":0,"updateTime":0,"viewCount":137,"likeCount":1,"commentCount":0,"favorCount":0,"weight":0,"status":2,"draftId":0,"tagIds":[],"tags":[],"isCommentEnable":true,"highQuality":false,"skipAds":false,"showAds":false,"focusRead":false,"author":{"id":1140960,"name":"mySoul","label":"好无知的自己","avatar":"https:\u002F\u002Fask.qcloudimg.com\u002Favatar\u002F1140960\u002F4vbga5orng.png","province":"1001","city":"","company":"春艮尧","title":"软件研发","school":"","major":"","homePage":"https:\u002F\u002Fwww.iming.info\u002F","region":1,"jobType":1,"graduationDate":"","education":0,"specialityIds":[10205,10620,10203,10292,10284],"specialities":[],"gender":1,"trade":"website_new","growthLevel":0,"isProfessionVerified":false,"status":1,"createTime":"2017-12-08 12:32:01","skipAds":false},"column":{"id":4626,"name":"mySoul","desc":"","icon":"https:\u002F\u002Fimgcache.qq.com\u002Fqcloud\u002Fdeveloper\u002Fimages\u002Frelease\u002Fcolumn-icons\u002F7.png","background":"","status":2,"creatorId":1140960,"memberCount":1,"articleCount":149,"followCount":33,"createdTime":1532551023}},{"id":1411255,"articleId":1411255,"title":"ol5里面实现相册地图","content":"","plain":"","brief":"","summary":"如下图，在手机里面有一个这样的功能，我称之为“相册地图”，本文讲述的是通过扩展ol.style的类，来实现“相册地图”这个功能。\n ","abstract":"如下图，在手机里面有一个这样的功能，我称之为“相册地图”，本文讲述的是通过扩展ol.style的类，来实现“相册地图”这个功能。\n ","posterSummary":"","description":"","picture":"https:\u002F\u002Fask.qcloudimg.com\u002Fhttp-save\u002Fyehe-3647312\u002F102dhcmufz.jpeg","coverImageUrl":"https:\u002F\u002Fask.qcloudimg.com\u002Fhttp-save\u002Fyehe-3647312\u002F102dhcmufz.jpeg","sourceType":1,"sourceDetail":{},"channelType":0,"channelDetail":{"source":"csdn","originalTime":"2019年03月23日 10:57:00"},"authorId":3647312,"columnId":72800,"writeTime":0,"updateTime":0,"viewCount":317,"likeCount":3,"commentCount":0,"favorCount":0,"weight":0,"status":2,"draftId":0,"tagIds":[],"tags":[],"isCommentEnable":true,"highQuality":false,"skipAds":false,"showAds":false,"focusRead":false,"author":{"id":3647312,"name":"lzugis","label":"传播GIS知识 | 交流GIS经验 | 分享GIS价值 | 专注GIS发展","avatar":"https:\u002F\u002Fask.qcloudimg.com\u002Fcustom-avatar\u002F3647312\u002Fcbp4etuh1b.jpg","province":"1001","city":"","company":"北京玖天气象科技有限公司","title":"架构师","school":"","major":"","homePage":"https:\u002F\u002Flzugis.blog.csdn.net","region":1,"jobType":1,"graduationDate":"","education":0,"specialityIds":[],"specialities":[],"gender":1,"trade":"","growthLevel":0,"isProfessionVerified":true,"status":1,"createTime":"2018-10-19 17:17:26","skipAds":false},"column":{"id":72800,"name":"跟牛老师一起学WEBGIS","desc":"跟牛老师一起学WEBGIS","icon":"https:\u002F\u002Fimgcache.qq.com\u002Fqcloud\u002Fdeveloper\u002Fimages\u002Frelease\u002Fcolumn-icons\u002F6.png","background":"","status":2,"creatorId":3647312,"memberCount":1,"articleCount":303,"followCount":88,"createdTime":1539940905}},{"id":1746678,"articleId":1746678,"title":"将文件拖到此处，点击上传","content":"","plain":"","brief":"","summary":"","abstract":"","posterSummary":"","description":"","picture":"","coverImageUrl":"","sourceType":1,"sourceDetail":{},"channelType":0,"channelDetail":{"source":"jianshu","originalTime":""},"authorId":1435798,"columnId":5146,"writeTime":0,"updateTime":0,"viewCount":107,"likeCount":4,"commentCount":0,"favorCount":0,"weight":0,"status":2,"draftId":0,"tagIds":[],"tags":[],"isCommentEnable":true,"highQuality":false,"skipAds":false,"showAds":false,"focusRead":false,"author":{"id":1435798,"name":"达达前端","label":"CSDN博客专家 | 前端开发兼产品负责人 | 公众号：程序员哆啦A梦，达达前端网站创始人","avatar":"https:\u002F\u002Fask.qcloudimg.com\u002Fhttp-save\u002Fyehe-1435798\u002Fckvo8kld2x.jpeg","province":"1213","city":"1216","company":"","title":"前端开发负责人","school":"","major":"软件技术","homePage":"http:\u002F\u002Fwww.dadaqianduan.cn\u002F#\u002F","region":1,"jobType":1,"graduationDate":"","education":0,"specialityIds":[10197,10170,10205,10204,10200],"specialities":[],"gender":1,"trade":"other","growthLevel":0,"isProfessionVerified":false,"status":1,"createTime":"2018-03-07 17:30:24","skipAds":false},"column":{"id":5146,"name":"达达前端","desc":"官方微信公众号 (dadaqianduan)：达达前端\n是一个热爱生活和工作的侠客！","icon":"https:\u002F\u002Fask.qcloudimg.com\u002Fcolumn-icons\u002F5146\u002F1435798\u002Fuen7asxbx5.jpg","background":"","status":2,"creatorId":1435798,"memberCount":1,"articleCount":630,"followCount":53,"createdTime":1534927543}}],"error":null}}}},"env":"production","documentBaseTitle":"云+社区 - 腾讯云","cdnDomain":"imgcache.qq.com","cssDomain":"imgcache.qq.com","session":{"isLogined":false,"isQcloudUser":false,"isOwner":false,"nickname":"","accountInfoCompleted":false,"phoneCompleted":false,"profile":{}},"fromMiniProgram":false,"router":{"location":{"pathname":"\u002Farticle\u002F1718134","search":"","hash":""}}});
</script><script src="%E8%80%81%E5%8F%B8%E6%9C%BA%E6%89%8B%E6%8A%8A%E6%89%8B%E6%95%99%E4%BD%A0%E7%BC%96%E5%86%99%E8%87%AA%E5%B7%B1%E7%9A%84springboot%20starter%20-%20%E4%BA%91+%E7%A4%BE%E5%8C%BA%20-%20%E8%85%BE%E8%AE%AF%E4%BA%91_files/qcloudStatApi.htm" async=""></script></div></body></html>